[{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/CONTRIBUTING.html","id":"development-environment","dir":"","previous_headings":"","what":"Development environment","title":"Contributing","text":"provide default.nix file defines right development environment already Nix user wish contribute package. development environment provide required R packages allow work rixpress. development environment pinned specific nixpkgs commit, reflect current status CRAN. ’s also important make sure contributions work rhub.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/CONTRIBUTING.html","id":"submitting-prs","dir":"","previous_headings":"","what":"Submitting PRs","title":"Contributing","text":"PRs welcome, just make sure unit tests pass open one. still want feedback tests don’t pass, set PR draft. ’ve added feature, make sure document add corresponding unit test well. don’t mind PRs code generated LLMs, mindful following: make sure understand happy responsible every line code written ; make sure code uses similar coding style (example, don’t use global veriables); LLMs sometimes generate verbose code achieve simple things, try simplify code much possible.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/CONTRIBUTING.html","id":"discussions","dir":"","previous_headings":"","what":"Discussions","title":"Contributing","text":"general discussion package, open discussion https://github.com/b-rodrigues/rixpress/discussions. submit bug reports request features, open issue https://github.com/b-rodrigues/rixpress/issues.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://b-rodrigues.github.io/rixpress/articles/a-intro-concepts.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Introductory concepts","text":"Nix terminology, derivation specification running executable precisely defined input files repeatably produce output files uniquely determined file system paths. (source) simpler terms, derivation recipe precisely defined inputs, steps, fixed output. means given identical inputs build steps, exact output always produced. achieve level reproducibility, several important measures must taken: inputs derivation must explicitly declared. Inputs include just data files, also software dependencies, configuration flags, environment variables, essentially anything necessary build process. build process takes place hermetic sandbox ensure exact output always produced. next sections document explain three points detail.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/a-intro-concepts.html","id":"derivations","dir":"Articles","previous_headings":"","what":"Derivations","title":"Introductory concepts","text":"example simple Nix expression: won’t go details , ’s important code uses awk, common Unix data processing tool, filter mtcars.csv file keep rows 9th column (column) equals 1. can see, significant amount boilerplate code required perform simple operation. However, approach completely reproducible: dependencies declared pinned specific dated branch rstats--nix/nixpkgs fork, thing make pipeline fail (though ’s bit stretch call pipeline) mtcars.csv file shared . add another step uses filtered.csv input continue processing . label code f subsequent chunk Nix code g, adding another step essentially result following computation: mtcars |> f |> g, f g pure functions, pipeline thus composition pure functions. Nix builds filtered.csv two steps: first generates derivation expression, builds . clarity document, ’ll refer code like example derivation rather expression, avoid confusion concept expression R. goal rixpress help write pipelines like mtcars |> f |> g without needing learn Nix, still benefiting powerful reproducibility features.","code":"let  pkgs = import (fetchTarball \"https://github.com/rstats-on-nix/nixpkgs/archive/2025-04-11.tar.gz\") {};  in  pkgs.stdenv.mkDerivation {   name = \"filtered_mtcars\";   buildInputs = [ pkgs.gawk ];   dontUnpack = true;   src = ./mtcars.csv;   installPhase = ''     mkdir -p $out     awk -F',' 'NR==1 || $9==\"1\" { print }' $src > $out/filtered.csv   ''; }"},{"path":"https://b-rodrigues.github.io/rixpress/articles/a-intro-concepts.html","id":"dependencies-of-derivations","dir":"Articles","previous_headings":"","what":"Dependencies of derivations","title":"Introductory concepts","text":"Nix requires dependencies derivation explicitly listed managed Nix . ’re building output requires, example, Quarto, Quarto must explicitly listed input, even already Quarto installed system. applies Quarto’s dependencies, dependencies dependencies, way common ancestor packages. Nix, run linear regression R, essentially need build entire universe dependencies first. Nix terms, complete set packages dependencies author, Eelco Dolstra, refers component closures: idea always deploy component closures: deploy component, must also deploy dependencies, dependencies, . , must always deploy set components closed ‘’depends ’’ relation. Since closures selfcontained, units complete software deployment. , set components closed, safe deploy, since using might cause components referenced missing target system. (Nix: Safe Policy-Free System Software Deployment, Dolstra et al., 2004). figure , paper, illustrates idea: Figure 4 Dolstra et al. (2004) figure, subversion depends openssl, depends glibc. Similarly, write derivation builds data frame filtering mtcars, derivation requires: input file, mtcars.csv. R potentially R packages like dplyr. R’s dependencies dependencies R packages. dependencies dependencies (way ). must managed Nix. dependency exists “outside” component closure available machine, pipeline work machine - defeating purpose reproducibility! (noted, however, sometimes good reasons dependency managed Nix case might want use targets running inside Nix shell instead rixpress, situations exception rather rule). Nix distinguishes different types dependencies (buildInputs, nativeBuildInputs, propagatedBuildInputs, propagatedNativeBuildInputs), let’s skip concept, relevant packaging upstream software, defining pipelines. ’re curious, read .","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/a-intro-concepts.html","id":"the-nix-store-and-hermetic-builds","dir":"Articles","previous_headings":"","what":"The Nix store and hermetic builds","title":"Introductory concepts","text":"building derivations, outputs saved Nix store. Typically located /nix/store/, folder contains software build artifacts produced Nix. example, write derivation computes tail file named mtcars.csv, derivation built, output stored path like /nix/store/81k4s9q652jlka0c36khpscnmr8wk7jb-mtcars_tail. long cryptographic hash uniquely identifies build output computed based content derivation along inputs dependencies. ensures build fully reproducible. result, building derivation two different machines yield cryptographic hash, can substitute built artifact derivation generates one--one. analogous mathematics: consider function f(x):=x2f(x):= x^2, writing f(2)f(2) 44 represents value. mechanism makes possible import export build artifacts pipelines avoid rebuild everything scratch different machines continuous integration platforms. rixpress two functions allow , called export_nix_archive() import_nix_archive(). ensure building derivations always produces exactly outputs, builds must occur isolated environment, often referred sandbox. approach, known hermetic build process, ensures build unaffected external factors state host system. isolation extends environment variables well. example, R users might set variable JAVA_HOME make R aware Java runtime installed. However, Java required derivation, setting JAVA_HOME outside sandbox effect; must explicitly set within sandbox. isolation also means need access API download data, won’t work internet connection allowed within build sandbox. may seem restrictive, makes perfect sense goal achieve complete reproducibility. Consider scenario need use function f() access API get data analysis. guarantee running f() today yield result running f() six months year? API even still online? true reproducibility, obtain data API , version archive , continue using archived data analysis (share anyone might want reproduce study).","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/a-intro-concepts.html","id":"summary-and-conclusion","dir":"Articles","previous_headings":"","what":"Summary and conclusion","title":"Introductory concepts","text":"explained beginning vignette, Nix generates derivation Nix expression process called instantiation. Writing reproducible pipeline Nix directly require writing long complex Nix expressions. rixpress comes - handles complexity . instantiation, Nix processes declarations, resolves inputs (including source files, build scripts, external dependencies), computes unique cryptographic hash. hash derived contents derivation entire dependency graph, forming part derivation’s identity. ensures even smallest change inputs result distinct derivation, guaranteeing reproducibility. avoid confusion concept expression R, throughout documentation refer Nix expressions derivations. instantiated, derivations can built. build process, Nix constructs isolated, hermetic environment explicitly declared dependencies available. makes build entirely deterministic, meaning identical inputs always produce identical outputs, regardless machine environment. isolation improves reliability facilitates debugging maintenance eliminating external variables. successful build, Nix stores output Nix store (typically /nix/store/). example, build derivation processes mtcars.csv file, output might saved unique path like /nix/store/81k4s9q652jlka0c36khpscnmr8wk7jb-mtcars_tail. cryptographic hash computed based derivation’s inputs build process. anything changes, hash different. extremely precise - even changing separator mtcars.csv data set , | result different hash, even though resulting mtcars_tail object might look identical us. Nix’s perspective, ’re different one inputs different. key takeaway Nix complex tool solves complex problem: ensuring complete reproducibility across different environments time. rixpress rix packages designed make Nix accessible R users, allowing benefit Nix’s reproducibility without learn complexities. Now ’re familiar basic Nix concepts, let’s move next vignette ’ll set first basic pipeline: vignette(\"b-core-functions\").","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/b-core-functions.html","id":"getting-data-into-the-pipeline","dir":"Articles","previous_headings":"","what":"Getting data into the pipeline","title":"Core rixpress Functions and Usage","text":"rixpress provides several functions help write derivations. functions typically start prefix rxp_ follow similar structure. first step pipeline usually import data. include data rixpress pipeline, use rxp_r_file(): rxp_r_file() requires R function single argument: path file read. example, assume columns mtcars.csv file separated | symbol. use anonymous function set correct separator create temporary function single argument read file 'data/mtcars.csv'. Important: approach means mtcars.csv file copied Nix store. essential Nix works avoided. Note rxp_r_file() quite flexible: works function reads file, regardless file type. path file can also URL.","code":"d0 <- rxp_r_file(   name = mtcars,   path = 'data/mtcars.csv',   read_function = \\(x) (read.csv(file = x, sep = \"|\")) )"},{"path":"https://b-rodrigues.github.io/rixpress/articles/b-core-functions.html","id":"declaring-build-steps","dir":"Articles","previous_headings":"","what":"Declaring build steps","title":"Core rixpress Functions and Usage","text":"data imported, can start manipulating . generate derivation similar one described vignette(\"-intro-concepts\"), using R dplyr instead awk, write: syntax familiar users targets package: similar tar_target() function, simply provide name derivation expression generate . ’s need write rixpress generate required Nix code automatically. continue transforming data, need define new derivation: Notice name d1 (filtered_mtcars) used d2: dependencies derivations defined.","code":"d1 <- rxp_r(   name = filtered_mtcars,   expr = dplyr::filter(mtcars, am == 1) ) d2 <- rxp_r(   name = mtcars_mpg,   expr = dplyr::select(filtered_mtcars, mpg) )"},{"path":"https://b-rodrigues.github.io/rixpress/articles/b-core-functions.html","id":"generating-the-pipeline","dir":"Articles","previous_headings":"","what":"Generating the pipeline","title":"Core rixpress Functions and Usage","text":"Let’s stop build pipeline. First, need define list derivations: pass rixpress() function: make code concise, can directly define list pass rixpress() using pipe operator |>: Running rixpress() performs several actions: creates folder called _rixpress project’s root directory. folder contains automatically generated files needed pipeline build successfully. generates file called pipeline.nix, defines entire pipeline Nix language. calls function rxp_make() build pipeline. However, try run code , likely fail. crucial piece missing: environment pipeline must run!","code":"derivs <- list(d0, d1, d2) rixpress(derivs) library(rixpress)  list(   rxp_r_file(     name = mtcars,     path = 'data/mtcars.csv',     read_function = \\(x) (read.csv(file = x, sep = \"|\"))   ),    rxp_r(     name = filtered_mtcars,     expr = dplyr::filter(mtcars, am == 1)   ),    rxp_r(     name = mtcars_mpg,     expr = dplyr::select(filtered_mtcars, mpg)   ) ) |>   rixpress()"},{"path":"https://b-rodrigues.github.io/rixpress/articles/b-core-functions.html","id":"defining-a-reproducible-shell-for-execution","dir":"Articles","previous_headings":"","what":"Defining a Reproducible Shell for Execution","title":"Core rixpress Functions and Usage","text":"Remember core purpose using Nix ensure reproducibility forcing explicitly declare dependencies. pipeline , need specify: version R used? R packages? pipeline uses filter() select() dplyr package, must declare dependencies. rix package comes . rix allows define reproducible development environments using simple R code. example, can define environment R dplyr like : Running code generates default.nix file can built using Nix calling nix-build. creates development environment containing RStudio, R, dplyr existed April 11, 2025. can use environment interactive data analysis just standard installation RStudio, R, dplyr. learn rix, visit https://docs.ropensci.org/rix/. reproducible development environments generated rix define dependencies needed pipeline. use environment build rixpress pipeline, must also add rixpress list packages environment. Since rixpress still development, must installed GitHub. ’s complete environment setup script looks: next vignette, ’ll learn use rix effectively provide reproducible execution environment pipelines. now, let’s assume ’ve used code generate environment, can also use interactive data analysis. can go back pipeline finalize : recommend always using two separate scripts: gen-env.R: Uses rix define execution environment gen-pipeline.R: Uses rixpress define reproducible analytical pipeline can quickly create scripts using rxp_init() function, generates files starter code help get started quickly.","code":"library(rix)  rix(   date = \"2025-04-11\",   r_pkgs = \"dplyr\",   ide = \"rstudio\",   project_path = \".\",   overwrite = TRUE ) library(rix)  # Define execution environment rix(   date = \"2025-04-11\",   r_pkgs = \"dplyr\",   git_pkgs = list(     package_name = \"rixpress\",     repo_url = \"https://github.com/b-rodrigues/rixpress\",     commit = \"HEAD\"   ),   ide = \"rstudio\",   project_path = \".\",   overwrite = TRUE ) library(rixpress) # Define pipeline list(   rxp_r_file(     name = mtcars,     path = 'data/mtcars.csv',     read_function = \\(x) (read.csv(file = x, sep = \"|\"))   ),    rxp_r(     name = filtered_mtcars,     expr = dplyr::filter(mtcars, am == 1)   ),    rxp_r(     name = mtcars_mpg,     expr = dplyr::select(filtered_mtcars, mpg)   ) ) |>   rixpress(project_path = \".\")"},{"path":"https://b-rodrigues.github.io/rixpress/articles/b-core-functions.html","id":"building-and-inspecting-outputs","dir":"Articles","previous_headings":"","what":"Building and inspecting outputs","title":"Core rixpress Functions and Usage","text":"run gen-pipeline.R (execute contents line--line), environment defined default.nix used. (’s also possible define separate environments different derivations, ’ll cover later vignette.) Upon successful execution, see: Now can follow instructions: Use rxp_inspect() see outputs located. function particularly useful pipeline fails, shows derivations succeeded failed. Use rxp_read(\"mtcars_mpg\") read object current R session, rxp_load(\"mtcars_mpg\") load directly global environment. Alternatively, use rxp_copy(\"mtcars_mpg\") create folder called pipeline-outputs containing mtcars_mpg .rds file. call rxp_copy() without arguments, pipeline outputs copied folder.","code":"Build process started...   Build successful! Run `rxp_inspect()` for a summary. Read individual derivations using `rxp_read()` or load them into the global environment using `rxp_load()`."},{"path":"https://b-rodrigues.github.io/rixpress/articles/b-core-functions.html","id":"dag-representation-of-the-pipeline","dir":"Articles","previous_headings":"","what":"DAG Representation of the Pipeline","title":"Core rixpress Functions and Usage","text":"’s often helpful visualize pipeline DAG (directed acyclic graph). can generate inspect visualization building pipeline adding build = FALSE argument rixpress(): won’t build pipeline generate useful files, including JSON representation pipeline _rixpress/dag.json. process quick allows visualize graph using rxp_visnetwork(), opens new tab web browser DAG pipeline made using visNetwork package: (image shows DAG complex example pipeline.) static documents, can use rxp_ggdag() uses ggdag hood: DAG can also return underlying igraph object plot DAG using tools: saves dag.dot object project’s _rixpress/ folder. reviewing DAG, can build pipeline running rxp_make() instead modifying original rixpress() call.","code":"rixpress(derivs, build = FALSE) dag_for_ci()"},{"path":"https://b-rodrigues.github.io/rixpress/articles/b-core-functions.html","id":"caveats","dir":"Articles","previous_headings":"","what":"Caveats","title":"Core rixpress Functions and Usage","text":"caveats need aware using rixpress. Due Nix works, certain things simply possible: mentioned vignette(\"-intro-concepts\"), functions executed hermetic sandbox: need access external resource, build going fail. example, use function get data API, need get data classic interactive R session, save data disk, can include pipeline. exception rxp_r_file() can download file URL. build artifacts saved Nix store, /nix/store/. working confidential data, make sure one else can access /nix/store. proprietary R packages, need include Nix shell. discussion rix, since rix generates execution environment, require help package packages, open issue rix GitHub repository.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/b-core-functions.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Core rixpress Functions and Usage","text":"Now understand basic, high-level concepts, let’s move next vignette, vignette(\"c-tutorial\"), ’ll learn set pipeline start finish.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/c-tutorial.html","id":"installing-the-required-software","dir":"Articles","previous_headings":"","what":"Installing the required software","title":"Setting up a pipeline from scratch: a tutorial","text":"’re using rixpress, ’re likely already familiar sister package rix, helps set reproducible development environments R Python using Nix. , likely already Nix installed system. case, read following {rix} vignette learn set Nix Linux Windows, one ’re macOS. Nix installed (well cachix, rstats--nix cache configured), ’re ready go.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/c-tutorial.html","id":"bootstrapping-a-project","dir":"Articles","previous_headings":"","what":"Bootstrapping a project","title":"Setting up a pipeline from scratch: a tutorial","text":"vignette, ’m going assume following: ’re already familiar Nix thanks rix; use Nix manage R environments data science projects (words, don’t system-installed R); Nix installed system well cachix configured rstats--nix cache; ’ve read previous two vignettes. ’re already familiar rix, ’ll likely know can use following command get access temporary Nix shell provides R, rix, rixpress (copy paste terminal folder want start project): drop Nix session. Type R start R session, type: write two files root project, gen-env.R gen-pipeline.R. gen-env.R look like : execute rixpress pipeline, environment needs rixpress available, likely require packages. Let’s add dplyr igraph (needed view graphical representation pipeline’s DAG). Open text editor change : ’ve added date, means versions R R packages set versions available date CRAN, ’ve added dplyr igraph. ’ve also added RStudio IDE. can now go back temporary Nix shell, run source(\"gen-env.R\"). create default.nix file project’s folder: Nix file defines environment. can now leave temporary shell first quitting R, typing CRTL-D exit. can build development environment using nix-build. Let’s now drop development shell typing nix-shell launch RStudio (whatever editor want use) open gen-pipeline.R: template starts rxp_r_file() load data, rxp_r() define step. two derivations put list passed rixpress(). Let’s start importing data filtering data using dplyr: Select pipeline run (highly recommend use keyboard shortcuts quickly run code working interactively). everything went well, see following R console: Let’s inspect pipeline outputs using rxp_inspect(): Three things built: mtcars, simply source data set, filtered_mtcars filtered data, object didn’t define called -derivations: mostly internal use can safely ignore . Let’s now use rxp_read() take look filtered_mtcars: can save object like : can simply use rxp_load(\"filtered_mtcars\") achieve result. can now manipulate object interactively, usual. Maybe still don’t quite know next step (maybe missing values need handle somehow, another cleaning step), know next steps, can write next derivation: Rebuild pipeline. first two steps skipped ’re already available Nix store. can now start inspect -> try stuff -> define derivation -> build pipeline loop next derivation. now know basics using rixpress build simple pipeline. next vignette vignette(\"d-polyglot\") explains build pipeline R Python derivations, well compiling Quarto document.","code":"nix-shell --expr \"$(curl -sl https://raw.githubusercontent.com/ropensci/rix/main/inst/extdata/default.nix)\" library(rixpress)  rxp_init() # This script defines the default environment the pipeline runs in. # Add the required packages to execute the code necessary for each derivation. # If you want to create visual representations of the pipeline, consider adding # `{visNetwork}` and `{ggdag}` to the list of R packages. library(rix)  # Define execution environment rix(   date = NULL,   r_pkgs = NULL,   py_conf = NULL,   git_pkgs = list(     \"package_name\" = \"rixpress\",     \"repo_url\" = \"https://github.com/b-rodrigues/rixpress\",     \"commit\" = \"HEAD\"   ),   ide = \"none\",   project_path = \".\" ) library(rix)  # Define execution environment rix(   date = \"2025-04-11\",   r_pkgs = c(\"dplyr\", \"igraph\"),   git_pkgs = list(     package_name = \"rixpress\",     repo_url = \"https://github.com/b-rodrigues/rixpress\",     commit = \"HEAD\"   ),   ide = \"rstudio\",   project_path = \".\",   overwrite = TRUE ) library(rixpress) library(igraph)  list(   rxp_r_file(     name = NULL,     path = NULL,     read_function = \\(x) read.csv(file = x, sep = \",\")   ),   rxp_r(     name = NULL,     expr = NULL   ) ) |> rixpress(project_path = \".\") library(rixpress) library(igraph)  list(   rxp_r_file(     name = mtcars,     path = 'data/mtcars.csv',     read_function = \\(x) (read.csv(file = x, sep = \"|\"))   ),    rxp_r(     name = filtered_mtcars,     expr = filter(mtcars, am == 1)   ) ) |> rixpress(project_path = \".\") Build process started...   Build successful! Run `rxp_inspect()` for a summary. Read individual derivations using `rxp_read()` or load them into the global environment using `rxp_load()`. derivation build_success 1 all-derivations          TRUE 2 filtered_mtcars          TRUE 3          mtcars          TRUE                                                          path       output 1 /nix/store/bz7ynl23bxkb0gza069i6bhxqy8bngmr-all-derivations filtered.... 2 /nix/store/lhmkmbdjpgzillsak3nwv1khlvabbgpa-filtered_mtcars filtered.... 3          /nix/store/0nj75qf7md5xi0517qdi1qpk44466zqi-mtcars       mtcars rxp_read(\"filtered_mtcars\") mpg cyl  disp  hp drat    wt  qsec vs am gear carb Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 Maserati Bora  15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 filtered_mtcars <- rxp_read(\"filtered_mtcars\") library(rixpress) library(igraph)  list(   rxp_r_file(     name = mtcars,     path = 'data/mtcars.csv',     read_function = \\(x) (read.csv(file = x, sep = \"|\"))   ),    rxp_r(     name = filtered_mtcars,     expr = filter(mtcars, am == 1)   ),    rxp_r(     name = mtcars_mpg,     expr = select(filtered_mtcars, mpg)   ) ) |>   rixpress(project_path = \".\")"},{"path":"https://b-rodrigues.github.io/rixpress/articles/d-polyglot.html","id":"analysing-the-mtcars-dataset-using-r-and-python","dir":"Articles","previous_headings":"","what":"Analysing the mtcars dataset using R and Python","title":"Polyglot pipelines and literate programming with Quarto or R Markdown","text":"rixpress makes easy write polyglot (multilingual) data science pipelines derivations run R Python code. vignette explains can easily set pipeline. Let’s assume Nix installed system, R installation (ideal scenario: plan use Nix full-time development environments, shouldn’t system-wide installation R). installing R R packages pipeline, install cachix configure rstats--nix cache. way, pre-compiled, binary, packages used instead built source. Run following line terminal: use cache: might message telling add user configuration file executing another command. ; need per machine want use rixpress . Many thanks Cachix sponsoring rstats--nix cache! Now cache configured, ’s time bootstrap development environment. Run line: drop temporary shell R rix rixpress available. Simply start R typing R, load rixpress call rxp_init() generate two files, gen-env.R gen-pipeline.R. can open gen-env.R favourite text editor define execution environment : Notice py_conf argument rix(): install Python listed Python packages environment. ’ll notice add reticulate list R packages install well; needed convert data R Python, can’t use JSON pass objects Python R. Python build steps executed standard Python shell without need use reticulate, ’re using JSON transfer data, need install reticulate. Now defined execution environment pipeline, can run script, still temporary Nix shell running source(\"gen-env.R\"). generate required default.nix. , quit R temporary shell (CTRL-D quit() R, exit terminal) build environment defined freshly generated default.nix typing nix-build. now build execution environment pipeline. can use environment work project interactively usual well. learn , check {rix}. can now edit pipeline script gen-pipeline.R: can see, starts reading data using Python polars package, converts R data frame manipulation, converts back Python data frame back R. ’ll notice point head data computed using user-defined function called my_head(). User-defined functions go script called functions.R functions.py derivation use need aware setting additional_files argument (derivation need files available, can put well. main difference rxp_py() rxp_r() Python code passed string, expression. Also, ’ll notice use polars.read_csv() instead common pl.read_csv(). default Python package get imported using simple statement import polars. want change import polars pl (import pandas pd ), can use adjust_import() function. example: adjust_import() sometimes mandatory, example want import package’s submodule: package called pillow, rixpress import write statement import pillow, simply work. case adjust_import() must used. want use JSON transfer data derivations, use serialize_function unserialize_function arguments respectively: Python serialize_to_json function defined functions.py script looks like : serialize_function unserialize_function arguments can used serialize objects using function, example qs::save() machine learning-specific functions specific models xgboost.","code":"nix-env -iA cachix -f https://cachix.org/api/v1/install cachix use rstats-on-nix nix-shell --expr \"$(curl -sl https://raw.githubusercontent.com/ropensci/rix/main/inst/extdata/default.nix)\" library(rix)  rix(   date = \"2025-03-31\",   r_pkgs = c(\"dplyr\", \"igraph\", \"reticulate\", \"quarto\"),   git_pkgs = list(     package_name = \"rixpress\",     repo_url = \"https://github.com/b-rodrigues/rixpress\",     commit = \"HEAD\"   ),   py_conf = list(     py_version = \"3.12\",     py_pkgs = c(\"pandas\", \"polars\", \"pyarrow\")   ),   ide = \"none\",   project_path = \".\",   overwrite = TRUE ) library(rixpress) library(igraph)  list(   rxp_py_file(     name = mtcars_pl,     path = 'data/mtcars.csv',     read_function = \"lambda x: polars.read_csv(x, separator='|')\"   ),    rxp_py(     # reticulate doesn't support polars DFs yet, so need to convert     # first to pandas DF     name = mtcars_pl_am,     py_expr = \"mtcars_pl.filter(polars.col('am') == 1).to_pandas()\"   ),    rxp_py2r(     name = mtcars_am,     expr = mtcars_pl_am   ),    rxp_r(     name = mtcars_head,     expr = my_head(mtcars_am),     additional_files = \"functions.R\"   ),    rxp_r2py(     name = mtcars_head_py,     expr = mtcars_head   ),    rxp_py(     name = mtcars_tail_py,     py_expr = 'mtcars_head_py.tail()'   ),    rxp_py2r(     name = mtcars_tail,     expr = mtcars_tail_py   ),    rxp_r(     name = mtcars_mpg,     expr = dplyr::select(mtcars_tail, mpg)   ),    rxp_quarto(     name = page,     qmd_file = \"my_doc/page.qmd\",     additional_files = c(\"my_doc/content.qmd\", \"my_doc/images\")   ) ) |>   rixpress(project_path = \".\") adjust_import(\"import polars\", \"import polars as pl\") adjust_import(\"import pillow\", \"from PIL import Image\") library(rixpress) library(igraph)  list(   rxp_py_file(     name = mtcars_pl,     path = \"data/mtcars.csv\",     read_function = \"lambda x: polars.read_csv(x, separator='|')\"   ),    rxp_py(     name = mtcars_pl_am,     py_expr = \"mtcars_pl.filter(polars.col('am') == 1)\",     additional_files = \"functions.py\",     serialize_function = \"serialize_to_json\",   ),    rxp_r(     name = mtcars_head,     expr = my_head(mtcars_pl_am),     additional_files = \"functions.R\",     unserialize_function = \"jsonlite::fromJSON\"   ),    rxp_r(     name = mtcars_mpg,     expr = dplyr::select(mtcars_head, mpg)   ) ) |>   rixpress(project_path = \".\", build = FALSE)   # Plot DAG for CI dag_for_ci() def serialize_to_json(pl_df, path):     with open(path, 'w') as f:         f.write(pl_df.write_json())"},{"path":"https://b-rodrigues.github.io/rixpress/articles/d-polyglot.html","id":"building-a-quarto-or-r-markdown-document","dir":"Articles","previous_headings":"","what":"Building a Quarto or R Markdown document","title":"Polyglot pipelines and literate programming with Quarto or R Markdown","text":"last pipeline want discuss builds Quarto document using rxp_quarto() (use rxp_rmd() R Markdown document). , additional_files argument used make derivation aware required files build document. source document looks like: Just like interactive session, rxp_read() used retrieve objects store. See refer document content.qmd image meme.png. want add arguments Quarto command line tool, can use args argument: don’t forget add typst list system packages call rix(): future, languages added rixpress, notably Julia. examples, check rixpress_demos repository. examples demonstrate additional features rixpress, including: Using Python ‘xgboost’ library transfering data R Importing multiple files Using multiple environments instead single default.nix file many others! Don’t hesitate submit examples well!","code":"--- title: \"Loading derivations outputs in a quarto doc\" format:   html:     embed-resources: true     toc: true ---  ![Meme](images/meme.png)  Use `rxp_read()` to show object in the document:  ``` #| eval: true  rixpress::rxp_read(\"mtcars_head\") ```  ``` #| eval: true  rixpress::rxp_read(\"mtcars_tail\") ```  ``` #| eval: true  rixpress::rxp_read(\"mtcars_mpg\") ```  {{< include content.qmd >}}  ``` #| eval: true  rixpress::rxp_read(\"mtcars_tail_py\") ``` rxp_quarto(   name = page,   qmd_file = \"my_doc/page.qmd\",   additional_files = c(\"my_doc/content.qmd\", \"my_doc/images\"),   args = \"--to typst\" ) rix(   date = \"2025-03-31\",   r_pkgs = c(\"dplyr\", \"igraph\", \"reticulate\", \"quarto\"),   system_pkgs = \"typst\",   git_pkgs = list(..."},{"path":"https://b-rodrigues.github.io/rixpress/articles/e-ci.html","id":"running-pipelines-on-github-actions","dir":"Articles","previous_headings":"","what":"Running pipelines on GitHub Actions","title":"Running pipelines in CI","text":"Running pipelines GitHub Actions quite easy. First, run rxp_ga() function project’s root. generate GitHub Actions .yaml file run pipeline push pull request. different steps happen: previous runs artifacts exist, get restored avoid recomputing using rixpress::import_nix_archive(); required software gets installed; execution environment gets generated built; rstats--nix cache gets configured decrease build times, see documentation (ignore part installing Nix); pipeline gets generated (potentially built, depending whether set build FALSE rixpress() call); dag gets printed; pipeline gets built: set build TRUE previously, build process gets skipped anyway; build artifacts paths get printed; build artifacts get archived reuse using rixpress::export_nix_archive() subsequent runs pushed rixpress-runs branch. Let explain possible view DAG CI. interactive session, need call plot_dag() see graphical representation pipeline. CI, since ’s graphical interface, need use tool allows represent pipeline text mode. One tool stacked-dag package Haskell programming language. takes igraph object .dot file, returns textual representation DAG. ’s step .yaml file used run pipeline CI exactly : can see, stacked-dag shows file _rixpress/dag.dot folder. calling rxp_ga(), dag_for_ci() function called automatically generate .dot file put right spot. looks like: Text representation DAG.","code":"- name: Check DAG if dag.dot exists and show it if yes   run: |     if [ -f dag.dot ]; then       nix-shell --quiet -p haskellPackages.stacked-dag --run \"stacked-dag dot _rixpress/dag.dot\"     else       echo \"dag.dot not found\"     fi"},{"path":"https://b-rodrigues.github.io/rixpress/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bruno Rodrigues. Author, maintainer.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rodrigues B (2025). rixpress: Build Reproducible Analytical Pipelines Nix. R package version 0.1.0, https://github.com/b-rodrigues/rixpress/.","code":"@Manual{,   title = {rixpress: Build Reproducible Analytical Pipelines With Nix},   author = {Bruno Rodrigues},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/b-rodrigues/rixpress/}, }"},{"path":"https://b-rodrigues.github.io/rixpress/index.html","id":"rixpress-reproducible-analytical-pipelines-with-nix","dir":"","previous_headings":"","what":"Build Reproducible Analytical Pipelines With Nix","title":"Build Reproducible Analytical Pipelines With Nix","text":"R package provides framework building multilanguage reproducible analytical pipelines leveraging Nix’s build automation capabilities. One design goals rixpress mimic user experience targets package, thus heavily inspired . builds upon rix package, provides helper function define reproducible development environments code using Nix, ensuring pipeline runs fully reproducible Nix-managed environment. rixpress requires users write pipeline using familiar R code. example, R script defines list derivations defined functions prefixed rxp_*(), passed rixpress(): Running rixpress() generates pipeline.nix file, contains build instructions derivations final outputs Nix code. possible define derivations run Python code well, objects can passed R Python using rxp_py2r() ryp_r2py(), using common serialization format JSON. default, calling rixpress() also builds pipeline, ’s possible generate pipeline.nix file build pipeline later stage using: build process assumes presence default.nix file defines computational environment pipeline runs ; default.nix file can generated using rix package. default.nix defines environment R, R packages (also Python Python packages needed), Quarto, required system-level dependencies pinned specific date ensure reproducibility. example , first derivation loads mtcars.csv (actually .psv file, since data separated pipes –|… ? just –). output (e.g., mtcars, mtcars_am, mtcars_head, mtcars_tail, mtcars_mpg, page) built Nix within environment defined default.nix file. Concretely, rix made using Nix package manager easier R users, rixpress makes now easy use Nix build automation tool! run rixpress(), folder called _rixpress/ gets also generated contains file JSON representation pipeline’s DAG (Directed Acyclic Graph). can visualize pipeline using rxp_ggdag(): DAG pipeline built using Nix, outputs get stored -called Nix store /nix/store/. can annoying retrieve objects Nix store rixpress contains several helper functions: rxp_read(\"mtcars_mpg\") reads mtcars_mpg memory; rxp_load(\"mtcars_mpg\") loads global environment. complex outputs documents, (example Quarto document defined , called page), rxp_read(\"page\") returns file path, can open browseURL(\"path//page\"), can copy outputs /nix/store/ current worknig directory using rxp_copy(\"page\"), read . can export cache file easily import another machine (CI) avoid rebuild everything scratch using export_nix_archive() import_nix_archive() respectively. rixpress() flexible; please consult repository contains many different examples can take inspiration .","code":"library(rixpress)  list(   rxp_r_file(     mtcars,     'mtcars.csv',     \\(x) (read.csv(file = x, sep = \"|\"))   ),    rxp_r(     mtcars_am,     filter(mtcars, am == 1)   ),    rxp_r(     mtcars_head,     head(mtcars_am)   ),    rxp_r(     mtcars_tail,     tail(mtcars_head)   ),    rxp_r(     mtcars_mpg,     select(mtcars_tail, mpg)   ),    rxp_quarto(     page,     \"page.qmd\"   ) ) |>   rixpress() rxp_make() rxp_ggdag()"},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/index.html","id":"rix","dir":"","previous_headings":"Installation","what":"rix","title":"Build Reproducible Analytical Pipelines With Nix","text":"rixpress builds rix, highly recommend start learning using rix trying hand rixpress. learning use rix, ’ll learn Nix, install use , ready use rixpress!","code":""},{"path":"https://b-rodrigues.github.io/rixpress/index.html","id":"installing-rixpress","dir":"","previous_headings":"Installation","what":"Installing rixpress","title":"Build Reproducible Analytical Pipelines With Nix","text":"Since ’s little point installing rixpress don’t use Nix, ideal way install rixpress instead use rix set reproducible environment includes rixpress required dependencies project. Take look introductory concepts vignette basic usage vignette get started! said, rixpress regular R package, can install GitHub directly (’s CRAN):","code":"# Install remotes if you don’t have it if (!require(\"remotes\")) install.packages(\"remotes\")  # Install the package from GitHub remotes::install_github(\"b-rodrigues/rixpress\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/add_import.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an import statement to Python files in the _rixpress folder matching a Nix environment name — add_import","title":"Add an import statement to Python files in the _rixpress folder matching a Nix environment name — add_import","text":"function appends specified import statement end Python file within _rixpress folder subdirectories, files whose base name matches provided Nix environment.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/add_import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an import statement to Python files in the _rixpress folder matching a Nix environment name — add_import","text":"","code":"add_import(import_statement, nix_env)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/add_import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an import statement to Python files in the _rixpress folder matching a Nix environment name — add_import","text":"import_statement character string representing import statement added. example, \"import numpy np\". nix_env character string naming Nix environment file (e.g. \"default.nix\" \"py-env.nix\" similar).","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/add_import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an import statement to Python files in the _rixpress folder matching a Nix environment name — add_import","text":"return value; function performs -place modifications files.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/add_import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an import statement to Python files in the _rixpress folder matching a Nix environment name — add_import","text":"","code":"if (FALSE) { # \\dontrun{ add_import(\"import numpy as np\", \"default.nix\") } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/adjust_import.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Python import statements — adjust_import","title":"Adjust Python import statements — adjust_import","text":"calling rixpress(), file containing Python import statements automatically generated inside _rixpress folder. example, numpy package needed, file include line like \"import numpy\". However, Python programmers often write \"import numpy np\" instead.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/adjust_import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust Python import statements — adjust_import","text":"","code":"adjust_import(old_import, new_import)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/adjust_import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust Python import statements — adjust_import","text":"old_import character string representing import statement replaced. example, \"import pillow\". new_import character string representing new import statement replace . example, \"PIL import Image\".","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/adjust_import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust Python import statements — adjust_import","text":"return value; function performs -place modifications files.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/adjust_import.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust Python import statements — adjust_import","text":"cases, correct import statement entirely different. example, pillow package, generated file contain \"import pillow\", incorrect—Python code import PIL namespace instead, e.g., \"PIL import Image\". adjustments automated reliably, adjust_import() function allows search replace import statements programmatically. reads file _rixpress folder, performs replacement, writes modified content back file.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/adjust_import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust Python import statements — adjust_import","text":"","code":"if (FALSE) { # \\dontrun{ adjust_import(\"import pillow\", \"from PIL import Image\") } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/dag_for_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Export DAG of pipeline and prepare it for rendering on CI — dag_for_ci","title":"Export DAG of pipeline and prepare it for rendering on CI — dag_for_ci","text":"function generates DOT file representation pipeline DAG, suitable visualization, potentially CI platforms. called rxp_ga().","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/dag_for_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export DAG of pipeline and prepare it for rendering on CI — dag_for_ci","text":"","code":"dag_for_ci(   nodes_and_edges = get_nodes_edges(),   output_file = \"_rixpress/dag.dot\" )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/dag_for_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export DAG of pipeline and prepare it for rendering on CI — dag_for_ci","text":"nodes_and_edges List, output get_nodes_edges(). Defaults calling get_nodes_edges(). output_file Character, path DOT file saved. Defaults \"_rixpress/dag.dot\". directory created exist.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/dag_for_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export DAG of pipeline and prepare it for rendering on CI — dag_for_ci","text":"Nothing, writes DOT file specified output_file.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/dag_for_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export DAG of pipeline and prepare it for rendering on CI — dag_for_ci","text":"","code":"if (FALSE) { # \\dontrun{   # Generate the default _rixpress/dag.dot   dag_for_ci()  } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/export_nix_archive.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Nix store paths to an archive — export_nix_archive","title":"Export Nix store paths to an archive — export_nix_archive","text":"Creates single archive file containing specified Nix store paths dependencies. archive can transferred another machine imported Nix store.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/export_nix_archive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Nix store paths to an archive — export_nix_archive","text":"","code":"export_nix_archive(archive_file = \"_rixpress/pipeline_outputs.nar\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/export_nix_archive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Nix store paths to an archive — export_nix_archive","text":"archive_file Character, path archive, defaults \"_rixpress/pipeline-outputs.nar\"","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/generate_dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a DAG from a list of derivations — generate_dag","title":"Generate a DAG from a list of derivations — generate_dag","text":"Creates JSON representation directed acyclic graph (DAG) based dependencies derivations. automatically called rixpress().","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/generate_dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a DAG from a list of derivations — generate_dag","text":"","code":"generate_dag(rxp_list, output_file = \"_rixpress/dag.json\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/generate_dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a DAG from a list of derivations — generate_dag","text":"rxp_list list derivations. output_file Path output JSON file. Defaults \"_rixpress/dag.json\".","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/generate_dag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a DAG from a list of derivations — generate_dag","text":"Nothing, writes JSON file representing DAG.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/generate_dag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a DAG from a list of derivations — generate_dag","text":"","code":"if (FALSE) { # \\dontrun{   generate_dag(rxp_list) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/get_nodes_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for plotting the DAG of the pipeline. — get_nodes_edges","title":"Prepare data for plotting the DAG of the pipeline. — get_nodes_edges","text":"Prepare data plotting DAG pipeline.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/get_nodes_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for plotting the DAG of the pipeline. — get_nodes_edges","text":"","code":"get_nodes_edges(path_dag = \"_rixpress/dag.json\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/get_nodes_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for plotting the DAG of the pipeline. — get_nodes_edges","text":"path_dag Character, defaults \"_rixpress/dag.json\".","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/get_nodes_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for plotting the DAG of the pipeline. — get_nodes_edges","text":"list two datasets, nodes edges.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/get_nodes_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for plotting the DAG of the pipeline. — get_nodes_edges","text":"","code":"if (FALSE) { # \\dontrun{   get_nodes_edges() } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/import_nix_archive.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Nix store paths from an archive — import_nix_archive","title":"Import Nix store paths from an archive — import_nix_archive","text":"Imports store paths contained archive file local Nix store. Useful transferring built outputs machines.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/import_nix_archive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Nix store paths from an archive — import_nix_archive","text":"","code":"import_nix_archive(archive_file = \"_rixpress/pipeline_outputs.nar\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/import_nix_archive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Nix store paths from an archive — import_nix_archive","text":"archive_file Character, path archive, defaults \"_rixpress/pipeline-outputs.nar\"","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/print.derivation.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for derivation objects — print.derivation","title":"Print method for derivation objects — print.derivation","text":"Print method derivation objects","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/print.derivation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for derivation objects — print.derivation","text":"","code":"# S3 method for class 'derivation' print(x, ...)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/print.derivation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for derivation objects — print.derivation","text":"x object class \"derivation\" ... Additional arguments passed print methods","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rixpress.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Nix Pipeline Code with a Generic Default Target — rixpress","title":"Generate Nix Pipeline Code with a Generic Default Target — rixpress","text":"function generates pipeline.nix file based list derivation objects. derivation defines build step, rixpress() chains steps handles serialization conversion Python objects R objects (vice-versa). Derivations created rxp_r(), rxp_py() . default, pipeline also immediately generated, build process can postponed setting build FALSE. case, pipeline can built using rxp_make().","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rixpress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Nix Pipeline Code with a Generic Default Target — rixpress","text":"","code":"rixpress(derivs, project_path = \".\", build = TRUE, ...)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rixpress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Nix Pipeline Code with a Generic Default Target — rixpress","text":"derivs list derivation objects, object list five elements: - $name, character, name derivation - $snippet, character, nix code snippet build derivation - $type, character, can R, Python Quarto - $additional_files, character vector paths files make available build sandbox - $nix_env, character, path Nix environment build derivation single deriv output rxp_r(), rxp_quarto() rxp_py() function. project_path Path root project, defaults \".\". build Logical, defaults TRUE. pipeline get built right generated? FALSE, can build pipeline later using rixpress(). ... arguments passed methods. Use max-jobs cores set parallelism build. See documentation rxp_make() details.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rixpress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Nix Pipeline Code with a Generic Default Target — rixpress","text":"Nothing, writes file called pipeline.nix Nix code build pipeline.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rixpress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Nix Pipeline Code with a Generic Default Target — rixpress","text":"generated pipeline.nix expression includes: required imports environments, typically default.nix files generated rix package; correct handling interdependencies different derivations; serialization deserialization R Python objects, conversion objects passed one language another; correct loading R Python packages, extra functions needed build specific targets cases, due automatic handling Python packages, users might want change import statements. default , say, pandas needed build derivation, imported import pandas. However, Python programmers typically use import pandas pd. change automatic import statements, please refer adjust_import().","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rixpress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Nix Pipeline Code with a Generic Default Target — rixpress","text":"","code":"if (FALSE) { # \\dontrun{ # Create derivation objects d1 <- rxp_r(mtcars_am, filter(mtcars, am == 1)) d2 <- rxp_r(mtcars_head, head(mtcars_am)) list_derivs <- list(d1, d2)  # Generate the pipeline code rixpress(derivs = list_derivs, project_path = \".\", build = TRUE)  } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_common_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the Nix derivation snippet for Python-R object transfer. — rxp_common_setup","title":"Generate the Nix derivation snippet for Python-R object transfer. — rxp_common_setup","text":"function constructs build_phase Nix derivation snippet based given parameters.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_common_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the Nix derivation snippet for Python-R object transfer. — rxp_common_setup","text":"","code":"rxp_common_setup(out_name, expr_str, nix_env, direction)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_common_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the Nix derivation snippet for Python-R object transfer. — rxp_common_setup","text":"out_name Character, name derivation. expr_str Character, name object transferred. nix_env Character, path Nix environment file. direction Character, either \"py2r\" (Python R) \"r2py\" (R Python).","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_common_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the Nix derivation snippet for Python-R object transfer. — rxp_common_setup","text":"list elements: name, snippet, type, additional_files, nix_env.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_copy.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy derivations from the Nix store to current working directory — rxp_copy","title":"Copy derivations from the Nix store to current working directory — rxp_copy","text":"Nix builds derivation, output saved Nix store located /nix/store/. Even though can import derivations current R session using rxp_read() rxp_load(), can useful copy outputs current working directory. especially useful Quarto documents, can one input, case html output.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_copy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy derivations from the Nix store to current working directory — rxp_copy","text":"","code":"rxp_copy(derivation_name = NULL)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_copy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy derivations from the Nix store to current working directory — rxp_copy","text":"derivation_name name derivation copy. empty, derivations copied.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_copy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy derivations from the Nix store to current working directory — rxp_copy","text":"Nothing, contents Nix store copied current working directory.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_copy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy derivations from the Nix store to current working directory — rxp_copy","text":"","code":"if (FALSE) { # \\dontrun{   # Copy all derivations to the current working directory   rxp_copy()    # Copy a specific derivation   rxp_copy(\"mtcars\")    # Copy a Quarto document output with multiple files   rxp_copy(\"my_quarto_doc\") } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_file_common.html","id":null,"dir":"Reference","previous_headings":"","what":"rxp_file_common — rxp_file_common","title":"rxp_file_common — rxp_file_common","text":"Creates Nix expression shared logic R Python file reading.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_file_common.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rxp_file_common — rxp_file_common","text":"","code":"rxp_file_common(   out_name,   path,   nix_env,   build_phase,   type,   derivation_func,   library_ext,   env_var = NULL )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_file_common.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rxp_file_common — rxp_file_common","text":"out_name Character, name derivation string. path Character, file path (URL local) folder path. nix_env Character, path Nix environment file. build_phase Character, language-specific build phase script. type Character, type derivation (\"rxp_r\" \"rxp_py\"). derivation_func Character, Nix derivation function (\"makeRDerivation\" \"makePyDerivation\"). library_ext Character, library file extension (\"R\" \"py\"). env_var List, defaults NULL. named list environment variables set running script, e.g., c(DATA_PATH = \"/path//data\"). entry added export statement build phase.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_file_common.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rxp_file_common — rxp_file_common","text":"list name, snippet, type, nix_env.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ga.html","id":null,"dir":"Reference","previous_headings":"","what":"rxp_ga Run a pipeline on GitHub Actions. — rxp_ga","title":"rxp_ga Run a pipeline on GitHub Actions. — rxp_ga","text":"rxp_ga Run pipeline GitHub Actions.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rxp_ga Run a pipeline on GitHub Actions. — rxp_ga","text":"","code":"rxp_ga()"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rxp_ga Run a pipeline on GitHub Actions. — rxp_ga","text":"Nothing, copies file directory.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ga.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rxp_ga Run a pipeline on GitHub Actions. — rxp_ga","text":"function puts .yaml file inside .github/workflows/ folder root project. workflow file expects scripts generated rxp_init(), gen-env.R gen-pipeline.R present. case, edit .yaml file accordingly. Build artifacts archived restored automatically runs. Make sure give read write permissions GitHub Actions bot.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rxp_ga Run a pipeline on GitHub Actions. — rxp_ga","text":"","code":"if (FALSE) { # \\dontrun{   rxp_ga() } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ggdag.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {ggplot2} — rxp_ggdag","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {ggplot2} — rxp_ggdag","text":"Uses {ggdag} generate plot. {ggdag} soft dependency {rixpress} need install use function.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ggdag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {ggplot2} — rxp_ggdag","text":"","code":"rxp_ggdag(nodes_and_edges = get_nodes_edges())"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ggdag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {ggplot2} — rxp_ggdag","text":"nodes_and_edges List, output get_nodes_edges().","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ggdag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {ggplot2} — rxp_ggdag","text":"{ggplot2} object.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ggdag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {ggplot2} — rxp_ggdag","text":"","code":"if (FALSE) { # \\dontrun{   rxp_ggdag() } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize rixpress project — rxp_init","title":"Initialize rixpress project — rxp_init","text":"Generates gen-env.R gen-pipeline.R scripts specified project directory, asking user confirmation. user declines, changes made.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize rixpress project — rxp_init","text":"","code":"rxp_init(project_path = \".\", skip_prompt = FALSE)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize rixpress project — rxp_init","text":"project_path Character string specifying project's path. skip_prompt Logical. TRUE, skips confirmation prompts proceeds initialization, useful continuous integration. Defaults FALSE.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_init.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize rixpress project — rxp_init","text":"Creates (overwriting already exist): gen-env.R: Script define execution environment {rix}. gen-pipeline.R: Defines data pipeline {rixpress}.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize rixpress project — rxp_init","text":"","code":"# Default usage (will prompt before any action) if (FALSE) { # \\dontrun{   rxp_init() } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_inspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect the build result of a pipeline. — rxp_inspect","title":"Inspect the build result of a pipeline. — rxp_inspect","text":"Returns data frame four columns: - derivation: name derivation - build_success: whether build successful - path: path derivation Nix store - output: output, derivation built successfully. Empty outputs mean derivation built successfully. Several outputs single derivation possible.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_inspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect the build result of a pipeline. — rxp_inspect","text":"","code":"rxp_inspect()"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_inspect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect the build result of a pipeline. — rxp_inspect","text":"data frame derivation names, build successful, paths /nix/store, build outputs.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_load.html","id":null,"dir":"Reference","previous_headings":"","what":"Load output of a derivation — rxp_load","title":"Load output of a derivation — rxp_load","text":"Loads output derivations parent frame current session, returns path reading directly possible.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load output of a derivation — rxp_load","text":"","code":"rxp_load(derivation_name)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load output of a derivation — rxp_load","text":"derivation_name Character, name derivation.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_load.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load output of a derivation — rxp_load","text":"Nothing, function side effect loading objects parent frame.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_load.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load output of a derivation — rxp_load","text":"derivation_name points single R object, gets loaded current session using assign(..., envir = parent.frame()), corresponds global environment regular interactive session. trying load Python object {reticulate} available, reticulate::py_load_object() used object gets loaded golbal environment. case derivation pointing several outputs (can happen building Quarto document example) loading fails, path object returned instead.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_load.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load output of a derivation — rxp_load","text":"","code":"if (FALSE) { # \\dontrun{   # Load an R object   rxp_load(\"mtcars\")    # Load a Python   rxp_load(\"my_python_model\")  } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_make.html","id":null,"dir":"Reference","previous_headings":"","what":"Build pipeline using Nix — rxp_make","title":"Build pipeline using Nix — rxp_make","text":"Runs nix-build quiet flag, outputting _rixpress/result.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_make.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build pipeline using Nix — rxp_make","text":"","code":"rxp_make(verbose = FALSE, max_jobs = 1, cores = 1)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_make.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build pipeline using Nix — rxp_make","text":"verbose Logical, defaults FALSE. Set TRUE see nix's standard output, can useful check happening build process takes long. max_jobs Integer, number derivations built parallel. cores Integer, number cores derivation can use build.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_make.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build pipeline using Nix — rxp_make","text":"character vector paths built outputs.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py.html","id":null,"dir":"Reference","previous_headings":"","what":"rxp_py Creates a Nix expression running a Python function — rxp_py","title":"rxp_py Creates a Nix expression running a Python function — rxp_py","text":"rxp_py Creates Nix expression running Python function","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rxp_py Creates a Nix expression running a Python function — rxp_py","text":"","code":"rxp_py(   name,   py_expr,   additional_files = \"\",   nix_env = \"default.nix\",   serialize_function = NULL,   unserialize_function = NULL,   env_var = NULL )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rxp_py Creates a Nix expression running a Python function — rxp_py","text":"name Symbol, name derivation. py_expr Character, Python code generate expression. additional_files Character vector, additional files include. Custom functions must go script called \"functions.py\", additional files need accessible build process can named anything. nix_env Character, path Nix environment file, default \"default.nix\". serialize_function Character, defaults NULL. name Python function used serialize object. must accept two arguments: object serialize (first), target file path (second). NULL, default behavior uses pickle.dump. Define function functions.py. unserialize_function Character, defaults NULL. name Python function used unserialize object. must accept one argument: file path. env_var List, defaults NULL. named list environment variables set running Python script, e.g., c(PYTHONPATH = \"/path//modules\"). entry added export statement build phase.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rxp_py Creates a Nix expression running a Python function — rxp_py","text":"object class derivation inherits lists.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rxp_py Creates a Nix expression running a Python function — rxp_py","text":"basic level, rxp_py(mtcars_am, \"mtcars.filter(polars.col('') == 1).to_pandas()\") equivalent mtcars_am = mtcars.filter(polars.col('') == 1).to_pandas(). rxp_py() generates required Nix boilerplate output -called \"derivation\" Nix jargon. Nix derivation recipe defines create output (case mtcars_am) including dependencies, build steps, output paths.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rxp_py Creates a Nix expression running a Python function — rxp_py","text":"","code":"if (FALSE) { # \\dontrun{   rxp_py(     mtcars_pl_am,     py_expr = \"mtcars_pl.filter(polars.col('am') == 1).to_pandas()\"   )    # Custom serialization   rxp_py(     mtcars_pl_am,     py_expr = \"mtcars_pl.filter(polars.col('am') == 1).to_pandas()\",     serialize_function = \"serialize_model\",     additional_files = \"functions.py\") } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py2r.html","id":null,"dir":"Reference","previous_headings":"","what":"Transfer Python object into an R session. — rxp_py2r","title":"Transfer Python object into an R session. — rxp_py2r","text":"Transfer Python object R session.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py2r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transfer Python object into an R session. — rxp_py2r","text":"","code":"rxp_py2r(name, expr, nix_env = \"default.nix\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py2r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transfer Python object into an R session. — rxp_py2r","text":"name Symbol, name derivation. expr Symbol, Python object loaded R. nix_env Character, path Nix environment file, default \"default.nix\".","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py2r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transfer Python object into an R session. — rxp_py2r","text":"object class derivation inherits lists.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py2r.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transfer Python object into an R session. — rxp_py2r","text":"rxp_py2r(my_obj, my_python_object) loads serialized Python object saves RDS file using reticulate::py_load_object().","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py2r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transfer Python object into an R session. — rxp_py2r","text":"","code":"if (FALSE) { # \\dontrun{ rxp_py2r(my_obj, my_python_object) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py_file.html","id":null,"dir":"Reference","previous_headings":"","what":"rxp_py_file — rxp_py_file","title":"rxp_py_file — rxp_py_file","text":"Creates Nix expression reads file (folder data) using Python.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rxp_py_file — rxp_py_file","text":"","code":"rxp_py_file(   name,   path,   read_function,   nix_env = \"default.nix\",   copy_data_folder = FALSE,   env_var = NULL )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rxp_py_file — rxp_py_file","text":"name Symbol, name derivation. path Character, file path include (e.g., \"data/mtcars.shp\") folder path (e.g., \"data\"). See details. read_function Character, Python function read data, taking one argument (path). nix_env Character, path Nix environment file, default \"default.nix\". copy_data_folder Logical, TRUE entire folder copied recursively build sandbox. env_var List, defaults NULL. named list environment variables set running Python script, e.g., c(PYTHONPATH = \"/path//modules\"). entry added export statement build phase.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rxp_py_file — rxp_py_file","text":"object class derivation inherits lists.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rxp_py_file — rxp_py_file","text":"three ways read data rixpress pipeline: first point directly file, example, rxp_py_file(mtcars, path = \"data/mtcars.csv\", read_function = pandas.read_csv). second way point file also include files \"data/\" folder (folder can named something else). needed data split several files, shapefile typically also needs files .shx .dbf files. , copy_data_folder must set TRUE. last way read data, point folder, use function recursively reads data. example rxp_py_file(many_csvs, path = \"data\", read_function = 'lambda x: pandas.read_csv(os.path.join(x, os.listdir(x)[0]), delimiter=\"|\")') provided anonymous function read .csv file data/ folder.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_quarto.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a Quarto document as a Nix derivation — rxp_quarto","title":"Render a Quarto document as a Nix derivation — rxp_quarto","text":"Render Quarto document Nix derivation","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_quarto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a Quarto document as a Nix derivation — rxp_quarto","text":"","code":"rxp_quarto(   name,   qmd_file,   additional_files = \"\",   nix_env = \"default.nix\",   args = \"\",   env_var = NULL )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_quarto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a Quarto document as a Nix derivation — rxp_quarto","text":"name Symbol, derivation name. qmd_file Character, path .qmd file. additional_files Character vector, additional files include, example folder containing picture include Quarto document. nix_env Character, path Nix environment file, default \"default.nix\". args character additional arguments passed directly quarto command. env_var List, defaults NULL. named list environment variables set running Quarto render command, e.g., c(QUARTO_PROFILE = \"production\"). entry added export statement build phase.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_quarto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a Quarto document as a Nix derivation — rxp_quarto","text":"object class derivation inherits lists.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_quarto.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Render a Quarto document as a Nix derivation — rxp_quarto","text":"include object built pipeline, rxp_read(\"derivation_name\") put .qmd file.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_quarto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render a Quarto document as a Nix derivation — rxp_quarto","text":"","code":"if (FALSE) { # \\dontrun{   # Compile a .qmd file to a pdf using typst   # `images` is a folder containing images to include in the Quarto doc   rxp_quarto(     name = report,     qmd_file = \"report.qmd\",     additional_files = \"images\",     args = \"--to typst\"   ) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r.html","id":null,"dir":"Reference","previous_headings":"","what":"rxp_r Creates a Nix expression running an R function — rxp_r","title":"rxp_r Creates a Nix expression running an R function — rxp_r","text":"rxp_r Creates Nix expression running R function","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rxp_r Creates a Nix expression running an R function — rxp_r","text":"","code":"rxp_r(   name,   expr,   additional_files = \"\",   nix_env = \"default.nix\",   serialize_function = NULL,   unserialize_function = NULL,   env_var = NULL )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rxp_r Creates a Nix expression running an R function — rxp_r","text":"name Symbol, name derivation. expr R code generate expression. additional_files Character vector, additional files include. Custom functions must go script called \"functions.R\", additional files need accessible build process can named anything. nix_env Character, path Nix environment file, default \"default.nix\". serialize_function Function, defaults NULL. function used serialize objects transfer derivations. must accept two arguments: object serialize (first), target file path (second). function different signature, wrap match interface. default, saveRDS() used, may yield unexpected results, especially complex objects like machine learning models. instance, {keras} models, use keras::save_model_hdf5() capture full model (architecture, weights, training config, optimizer state, etc.). unserialize_function Function, defaults NULL. function used unserialize objects transferred derivations. default, readRDS() used, may produce unexpected results complex objects like machine learning models. example, parent derivation used keras::save_model_hdf5() serialize model, derivation use keras::load_model_hdf5() load correctly. env_var List, defaults NULL. named list environment variables set running R script, e.g., list(\"CMDSTAN\" = \"$defaultPkgs.cmdstan/opt/cmdstan\"). entry added export statement build phase.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rxp_r Creates a Nix expression running an R function — rxp_r","text":"object class derivation inherits lists.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rxp_r Creates a Nix expression running an R function — rxp_r","text":"basic level, rxp_r(mtcars_am, filter(mtcars, == 1)) equivalent mtcars <- filter(mtcars, == 1). rxp_r() generates required Nix boilerplate output -called \"derivation\" Nix jargon. Nix derivation recipe defines create output (case mtcars_am) including dependencies, build steps, output paths.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rxp_r Creates a Nix expression running an R function — rxp_r","text":"","code":"if (FALSE) { # \\dontrun{   # Basic usage   rxp_r(name = filtered_mtcars, expr = filter(mtcars, am == 1))    # Serialize object using qs   rxp_r(    name = filtered_mtcars,    expr = filter(mtcars, am == 1),    serialize_function = qs::qsave   )   # Unerialize using qs::read in the next derivation   rxp_r(    name = mtcars_mpg,    expr = select(filtered_mtcars, mpg),    unserialize_function = qs::read   ) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r2py.html","id":null,"dir":"Reference","previous_headings":"","what":"Transfer R object into a Python session. — rxp_r2py","title":"Transfer R object into a Python session. — rxp_r2py","text":"Transfer R object Python session.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r2py.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transfer R object into a Python session. — rxp_r2py","text":"","code":"rxp_r2py(name, expr, nix_env = \"default.nix\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r2py.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transfer R object into a Python session. — rxp_r2py","text":"name Symbol, name derivation. expr Symbol, R object saved Python pickle. nix_env Character, path Nix environment file, default \"default.nix\".","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r2py.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transfer R object into a Python session. — rxp_r2py","text":"object class derivation inherits lists.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r2py.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transfer R object into a Python session. — rxp_r2py","text":"rxp_r2py(my_obj, my_r_object) saves R object Python pickle using reticulate::py_save_object().","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r2py.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transfer R object into a Python session. — rxp_r2py","text":"","code":"if (FALSE) { # \\dontrun{   rxp_r2py(my_obj, my_r_object) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r_file.html","id":null,"dir":"Reference","previous_headings":"","what":"rxp_r_file — rxp_r_file","title":"rxp_r_file — rxp_r_file","text":"Creates Nix expression reads file (folder data) using R.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rxp_r_file — rxp_r_file","text":"","code":"rxp_r_file(   name,   path,   read_function,   nix_env = \"default.nix\",   copy_data_folder = FALSE,   env_var = NULL )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rxp_r_file — rxp_r_file","text":"name Symbol, name derivation. path Character, file path include (e.g., \"data/mtcars.shp\") folder path (e.g., \"data\"). See details. read_function Function, R function read data, taking one argument (path). nix_env Character, path Nix environment file, default \"default.nix\". copy_data_folder Logical, TRUE entire folder copied recursively build sandbox. env_var List, defaults NULL. named list environment variables set running R script, e.g., c(DATA_PATH = \"/path//data\"). entry added export statement build phase.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rxp_r_file — rxp_r_file","text":"object class derivation inherits lists.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rxp_r_file — rxp_r_file","text":"three ways read data rixpress pipeline: first point directly file, example, rxp_r_file(mtcars, path = \"data/mtcars.csv\", read_function = read.csv). second way point file also include files \"data/\" folder (folder can named something else). needed data split several files, shapefile typically also needs files .shx .dbf files. , copy_data_folder must set TRUE. last way read data, point folder, use function recursively reads data. example rxp_r_file(many_csvs, path = \"data\", read_function = \\(x)(readr::read_csv( list.files(x, full.names = TRUE, pattern = \".csv$\")))) provided anonymous function read .csv files data/ folder.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read output of a derivation — rxp_read","title":"Read output of a derivation — rxp_read","text":"Reads output derivations current session, returns path reading directly possible.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read output of a derivation — rxp_read","text":"","code":"rxp_read(derivation_name)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read output of a derivation — rxp_read","text":"derivation_name Character, name derivation.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read output of a derivation — rxp_read","text":"derivation's output.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read output of a derivation — rxp_read","text":"derivation_name points single R object, gets read current session using readRDS(). Python object {reticulate} available, reticulate::py_load_object() used. case derivation pointing several outputs (can happen building Quarto document example) neither readRDS() reticulate::py_load_object() successfully read object, path object returned instead.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read output of a derivation — rxp_read","text":"","code":"if (FALSE) { # \\dontrun{   mtcars <- rxp_read(\"mtcars\") } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Render an R Markdown document as a Nix derivation — rxp_rmd","title":"Render an R Markdown document as a Nix derivation — rxp_rmd","text":"Render R Markdown document Nix derivation","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render an R Markdown document as a Nix derivation — rxp_rmd","text":"","code":"rxp_rmd(   name,   rmd_file,   additional_files = \"\",   nix_env = \"default.nix\",   params = NULL,   env_var = NULL )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render an R Markdown document as a Nix derivation — rxp_rmd","text":"name Symbol, derivation name. rmd_file Character, path .Rmd file. additional_files Character vector, additional files include, example folder containing pictures include R Markdown document. nix_env Character, path Nix environment file, default \"default.nix\". params List, parameters pass R Markdown document. Default NULL. env_var List, defaults NULL. named list environment variables set running R Markdown render command, e.g., c(RSTUDIO_PANDOC = \"/path//pandoc\"). entry added export statement build phase.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_rmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render an R Markdown document as a Nix derivation — rxp_rmd","text":"object class derivation inherits lists.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_rmd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Render an R Markdown document as a Nix derivation — rxp_rmd","text":"include objects built pipeline, rxp_read(\"derivation_name\") put .Rmd file.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_rmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render an R Markdown document as a Nix derivation — rxp_rmd","text":"","code":"if (FALSE) { # \\dontrun{   # Compile a .Rmd file to a pdf   # `images` is a folder containing images to include in the R Markdown doc   rxp_rmd(     name = report,     rmd_file = \"report.Rmd\",     additional_files = \"images\"   ) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_visnetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {visNetwork} — rxp_visnetwork","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {visNetwork} — rxp_visnetwork","text":"Uses {visNetwork} generate plot. {visNetwork} soft dependency {rixpress} need install use function.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_visnetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {visNetwork} — rxp_visnetwork","text":"","code":"rxp_visnetwork(nodes_and_edges = get_nodes_edges())"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_visnetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {visNetwork} — rxp_visnetwork","text":"nodes_and_edges List, output get_nodes_edges().","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_visnetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {visNetwork} — rxp_visnetwork","text":"Nothing, function opens new tab browser DAG generated using {visNetwork}.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_visnetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {visNetwork} — rxp_visnetwork","text":"","code":"if (FALSE) { # \\dontrun{   rxp_visnetwork() } # }"},{"path":"https://b-rodrigues.github.io/rixpress/news/index.html","id":"rixpress-010-2025-04-14","dir":"Changelog","previous_headings":"","what":"rixpress 0.1.0 (2025-04-14)","title":"rixpress 0.1.0 (2025-04-14)","text":"First release (GitHub).","code":""},{"path":"https://b-rodrigues.github.io/rixpress/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"rixpress 0.1.0 (2025-04-14)","text":"Possibility define pipelines R, Python Quarto outputs. Data transfer R Python made using reticulate. Basic plotting DAG pipeline. Demos available : https://github.com/b-rodrigues/rixpress_demos","code":""}]
