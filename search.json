[{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/CONTRIBUTING.html","id":"development-environment","dir":"","previous_headings":"","what":"Development environment","title":"Contributing","text":"provide default.nix file defines right development environment already Nix user wish contribute package. development environment provide required R packages allow work rixpress. development environment pinned specific nixpkgs commit, reflect current status CRAN. ’s also important make sure contributions work rhub.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/CONTRIBUTING.html","id":"unit-and-end-to-end-tests","dir":"","previous_headings":"","what":"Unit and end-to-end tests","title":"Contributing","text":"package many unit tests, functionality reliably tested using unit tests. solve issue, set another repository called b-rodrigues/rixpress_demos many examples run GitHub Actions time commit pushed rixpress’s GitHub repository.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/CONTRIBUTING.html","id":"submitting-prs","dir":"","previous_headings":"","what":"Submitting PRs","title":"Contributing","text":"PRs welcome, just make sure unit tests pass open one. Ideally, also clone b-rodrigues/rixpress_demos try run examples using changes. still want feedback tests don’t pass, set PR draft. ’ve added feature, make sure document add corresponding unit test well. don’t mind PRs code generated LLMs, mindful following: make sure understand happy responsible every line code written ; make sure code uses similar coding style (example, don’t use global veriables); LLMs sometimes generate verbose code achieve simple things, try simplify code much possible.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/CONTRIBUTING.html","id":"discussions","dir":"","previous_headings":"","what":"Discussions","title":"Contributing","text":"general discussion package, open discussion https://github.com/b-rodrigues/rixpress/discussions. submit bug reports request features, open issue https://github.com/b-rodrigues/rixpress/issues.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://b-rodrigues.github.io/rixpress/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://b-rodrigues.github.io/rixpress/articles/ci.html","id":"running-pipelines-on-github-actions","dir":"Articles","previous_headings":"","what":"Running pipelines on GitHub Actions","title":"Running pipelines in CI","text":"Running pipelines GitHub Actions quite easy. First, run rxp_ga() function project’s root. generate GitHub Actions .yaml file run pipeline push pull request. different steps happen: previous run artifacts exist, restored avoid recomputing using rixpress::rxp_import_artifacts(); required software installed; execution environment generated built; rstats--nix cache configured decrease build times, see documentation (ignore part installing Nix); pipeline generated (potentially built, depending whether set build FALSE rxp_populate() call); DAG gets printed; pipeline built: set build TRUE previously, build process skipped anyway; build artifacts paths printed; build artifacts archived reuse using rixpress::rxp_export_artifacts() subsequent runs pushed rixpress-runs branch. Let explain view DAG CI. interactive session, need call plot_dag() see graphical representation pipeline. CI, since ’s graphical interface, need use tool allows represent pipeline text mode. One tool stacked-dag package Haskell programming language. takes igraph object .dot file, returns textual representation DAG. , ’s step .yaml file used run pipeline CI exactly : can see, stacked-dag processes file _rixpress/dag.dot folder. calling rxp_ga(), rxp_dag_for_ci() function called automatically generate .dot file put right spot. looks like: Text representation DAG.","code":"- name: Check DAG if dag.dot exists and show it if yes   run: |     if [ -f dag.dot ]; then       nix-shell --quiet -p haskellPackages.stacked-dag --run \"stacked-dag dot _rixpress/dag.dot\"     else       echo \"dag.dot not found\"     fi"},{"path":"https://b-rodrigues.github.io/rixpress/articles/cmdstanr.html","id":"setting-up-the-environment","dir":"Articles","previous_headings":"","what":"Setting up the Environment","title":"Using {cmdstanr} with {rixpress}","text":"rixpress pipeline, first step define execution environment using rix: Key points environment definition: cmdstan included system_pkgs. makes cmdstan executables available pipeline. {cmdstanr} installed GitHub repository, ’s available CRAN. Pinning specific commit recommended maximum reproducibility. environment set , can define pipeline:","code":"library(rix)  rix(   date = \"2025-04-29\",   r_pkgs = c(\"readr\", \"dplyr\", \"ggplot2\"), # Add other R packages as needed   system_pkgs = \"cmdstan\", # Crucial: include cmdstan as a system dependency   git_pkgs = list(     list(       package_name = \"cmdstanr\",       repo_url = \"https://github.com/stan-dev/cmdstanr\",       commit = \"79d37792d8e4ffcf3cf721b8d7ee4316a1234b0c\" # Pin to a specific commit     ),     list(       package_name = \"rixpress\",       repo_url = \"https://github.com/b-rodrigues/rixpress\",       commit = \"HEAD\" # Or pin to a specific commit     )   ),   ide = \"none\", # Or your preferred IDE   project_path = \".\",   overwrite = TRUE )"},{"path":"https://b-rodrigues.github.io/rixpress/articles/cmdstanr.html","id":"setting-up-the-pipeline","dir":"Articles","previous_headings":"","what":"Setting up the pipeline","title":"Using {cmdstanr} with {rixpress}","text":"Stan model code reside .stan file. use rxp_r_file() bring contents pipeline character string. Next, define parameters simulate data model.","code":"rxp_r_file(   bayesian_linear_regression_model,   \"model.stan\",   readLines ) rxp_r(     parameters,     list(       N = 100,       alpha = 2,       beta = -0.5,       sigma = 1.e-1     )   ),   rxp_r(     x,     rnorm(parameters$N, 0, 1)   ),   rxp_r(     y,     rnorm(       n = parameters$N,       mean = parameters$alpha + parameters$beta * x,       sd = parameters$sigma     )   ),   rxp_r(     # Prepare the data list for cmdstanr     inputs,     list(N = parameters$N, x = x, y = y)   ),"},{"path":"https://b-rodrigues.github.io/rixpress/articles/cmdstanr.html","id":"compiling-and-sampling-the-model","dir":"Articles","previous_headings":"","what":"Compiling and Sampling the Model","title":"Using {cmdstanr} with {rixpress}","text":"Interfacing cmdstan within rixpress requires specific strategy due hermetic nature Nix sandboxes. ’ll use wrapper function handle model compilation sampling within single rxp_r() step. First, let’s define wrapper function (e.g., functions.R file ’ll include): Now, use wrapper pipeline: Explanation Wrapper Approach: stan_string = bayesian_linear_regression_model: pass model code (read rxp_r_file) string wrapper. writeLines(stan_string, con = stan_file): Inside wrapper, Stan code written temporary .stan file. file exists within sandbox current rxp_r step. crucial cmdstan_model needs file path. Attempting pass original model.stan path directly via additional_files cmdstan_model can lead permission path issues cmdstan tries compile different working directory context. cmdstanr::cmdstan_model(): Compiles model temporary stan_file. model$sample(): Samples compiled model. Single Step: compilation sampling must happen within rxp_r step (thus sandbox). model object returned cmdstan_model() contains paths compiled executable. separate steps, paths compilation sandbox wouldn’t valid sampling sandbox. env_var = c(\"CMDSTAN\" = \"${defaultPkgs.cmdstan}/opt/cmdstan\"): sets CMDSTAN environment variable within sandbox specific step. {cmdstanr} uses variable locate cmdstan installation. ${defaultPkgs.cmdstan} Nix interpolation resolves path cmdstan package Nix store. environment providing cmdstan named differently, example cmdstan-env.nix, need use ${cmdstan_envPkgs.cmdstan}.","code":"# In functions.R cmdstan_model_wrapper <- function(   stan_string = NULL, # The Stan model code as a character string   inputs,             # Data list for the model   seed,               # Seed for reproducibility   ...                 # Additional arguments for cmdstan_model or sample ) {   # Create a temporary .stan file within the sandbox   stan_file <- tempfile(pattern = \"model_\", fileext = \".stan\")   writeLines(stan_string, con = stan_file)    # Compile the Stan model   # cmdstanr will find cmdstan via the CMDSTAN environment variable   model <- cmdstanr::cmdstan_model(     stan_file = stan_file,     ...   )    # Sample from the posterior   fitted_model <- model$sample(     data = inputs,     seed = seed,     ...   )    return(fitted_model) } # ... (continuation of pipeline_steps list)   rxp_r(     model, # Target name for the fitted model object     cmdstan_model_wrapper(       stan_string = bayesian_linear_regression_model,       inputs = inputs,       seed = 22     ),     user_functions = \"functions.R\",     serialize_function = \"save_model\",     env_var = c(\"CMDSTAN\" = \"${defaultPkgs.cmdstan}/opt/cmdstan\")   )"},{"path":"https://b-rodrigues.github.io/rixpress/articles/cmdstanr.html","id":"custom-serialisation","dir":"Articles","previous_headings":"Compiling and Sampling the Model","what":"Custom Serialisation","title":"Using {cmdstanr} with {rixpress}","text":"{cmdstanr} provides specific method saving fitted model objects ensure necessary components preserved. define simple wrapper use rixpress. specifying serialize_function = \"save_model\" rxp_r() call, rixpress use function instead default saveRDS(). fitted model can read using rxp_read(\"model\"), internally use readRDS().","code":"save_model <- function(fitted_model, path, ...) {   fitted_model$save_object(file = path, ...) }"},{"path":"https://b-rodrigues.github.io/rixpress/articles/cmdstanr.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Using {cmdstanr} with {rixpress}","text":"Using {cmdstanr} rixpress involves key considerations: Include cmdstan system_pkgs {cmdstanr} (Git) rix environment definition. Read .stan file pipeline using rxp_r_file(). Implement wrapper function : Takes model code string writes temporary .stan file inside wrapper. Calls cmdstanr::cmdstan_model() temporary file. Calls model$sample() fit model. Returns fitted model object. Perform model compilation sampling within rxp_r() call using wrapper. Set CMDSTAN environment variable rxp_r() step runs wrapper, pointing Nix store path cmdstan. Use {cmdstanr}’s $save_object() method via custom serialize_function robust saving fitted model. approach ensures cmdstan can operate correctly within isolated reproducible environment provided rixpress Nix.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/core-functions.html","id":"getting-data-into-the-pipeline","dir":"Articles","previous_headings":"","what":"Getting data into the pipeline","title":"Core rixpress Functions and Usage","text":"rixpress provides several functions help write derivations. functions typically start prefix rxp_ follow similar structure. first step pipeline usually import data. include data rixpress pipeline, use rxp_r_file(): rxp_r_file() requires R function single argument: path file read. example, assume columns mtcars.csv file separated | symbol. use anonymous function set correct separator create temporary function single argument read file 'data/mtcars.csv'. Important: approach means mtcars.csv file copied Nix store. essential Nix works. Note rxp_r_file() quite flexible: works function reads file, regardless file type. path file can also URL.","code":"d0 <- rxp_r_file(   name = mtcars,   path = 'data/mtcars.csv',   read_function = \\(x) (read.csv(file = x, sep = \"|\")) )"},{"path":"https://b-rodrigues.github.io/rixpress/articles/core-functions.html","id":"declaring-build-steps","dir":"Articles","previous_headings":"","what":"Declaring build steps","title":"Core rixpress Functions and Usage","text":"data imported, can start manipulating . generate derivation similar one described vignette(\"intro-concepts\"), using R dplyr instead awk, write: syntax familiar users targets package: similar tar_target() function, simply provide name derivation expression generate . ’s need write rixpress generate required Nix code automatically. continue transforming data, need define new derivation: Notice name d1 (filtered_mtcars) used d2: dependencies derivations defined.","code":"d1 <- rxp_r(   name = filtered_mtcars,   expr = dplyr::filter(mtcars, am == 1) ) d2 <- rxp_r(   name = mtcars_mpg,   expr = dplyr::select(filtered_mtcars, mpg) )"},{"path":"https://b-rodrigues.github.io/rixpress/articles/core-functions.html","id":"generating-the-pipeline","dir":"Articles","previous_headings":"","what":"Generating the pipeline","title":"Core rixpress Functions and Usage","text":"Let’s stop generate pipeline. First, need define list derivations: pass rxp_populate() function: make code concise, can directly define list pass rxp_populate() using pipe operator |>: Running rxp_populate() performs several actions: creates folder called _rixpress project’s root directory. folder contains automatically generated files needed pipeline build successfully. generates file called pipeline.nix, defines entire pipeline Nix language. build = TRUE, calls rxp_make() build pipeline. However, try run code , likely fail. crucial piece missing: environment pipeline must run!","code":"derivs <- list(d0, d1, d2) rxp_populate(derivs) library(rixpress)  list(   rxp_r_file(     name = mtcars,     path = 'data/mtcars.csv',     read_function = \\(x) (read.csv(file = x, sep = \"|\"))   ),    rxp_r(     name = filtered_mtcars,     expr = dplyr::filter(mtcars, am == 1)   ),    rxp_r(     name = mtcars_mpg,     expr = dplyr::select(filtered_mtcars, mpg)   ) ) |>   rxp_populate()"},{"path":"https://b-rodrigues.github.io/rixpress/articles/core-functions.html","id":"defining-a-reproducible-shell-for-execution","dir":"Articles","previous_headings":"","what":"Defining a Reproducible Shell for Execution","title":"Core rixpress Functions and Usage","text":"Remember core purpose using Nix ensure reproducibility forcing explicitly declare dependencies. pipeline , need specify: version R R packages used? pipeline uses filter() select() dplyr package, must declare dependencies. rix package comes . rix allows define reproducible development environments using simple R code. example, can define environment R dplyr like : Running code generates default.nix file can built using Nix calling nix-build. creates development environment containing RStudio, R, dplyr existed April 11, 2025. can use environment interactive data analysis just standard installation RStudio, R, dplyr. learn rix, visit https://docs.ropensci.org/rix/. reproducible development environments generated rix define dependencies needed pipeline. use environment build rixpress pipeline, must also add rixpress list packages environment. Since rixpress still development, must installed GitHub. ’s complete environment setup script looks: next vignette, ’ll learn use rix effectively provide reproducible execution environment pipelines. now, let’s assume ’ve used code generate environment, can also use interactive data analysis. can go back pipeline finalise : recommend always using two separate scripts: gen-env.R: Uses rix define execution environment gen-pipeline.R: Uses rixpress define reproducible analytical pipeline can quickly create scripts using rxp_init() function, generates files starter code help get started quickly.","code":"library(rix)  rix(   date = \"2025-04-11\",   r_pkgs = \"dplyr\",   ide = \"rstudio\",   project_path = \".\",   overwrite = TRUE ) library(rix)  # Define execution environment rix(   date = \"2025-04-11\",   r_pkgs = \"dplyr\",   git_pkgs = list(     package_name = \"rixpress\",     repo_url = \"https://github.com/b-rodrigues/rixpress\",     commit = \"HEAD\"   ),   ide = \"rstudio\",   project_path = \".\",   overwrite = TRUE ) library(rixpress) # Define pipeline list(   rxp_r_file(     name = mtcars,     path = 'data/mtcars.csv',     read_function = \\(x) (read.csv(file = x, sep = \"|\"))   ),    rxp_r(     name = filtered_mtcars,     expr = dplyr::filter(mtcars, am == 1)   ),    rxp_r(     name = mtcars_mpg,     expr = dplyr::select(filtered_mtcars, mpg)   ) ) |>   rxp_populate(project_path = \".\")"},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/articles/core-functions.html","id":"graphical-representation-of-the-pipelines-dag","dir":"Articles","previous_headings":"Optional steps before building the pipeline","what":"Graphical representation of the pipeline’s DAG","title":"Core rixpress Functions and Usage","text":"’s often helpful visualise pipeline DAG (directed acyclic graph). default, build argument rxp_populate() FALSE, calling build pipeline: won’t build pipeline generate useful files, including JSON representation pipeline _rixpress/dag.json. process quick allows visualise graph using rxp_visnetwork(), opens new tab web browser displaying pipeline’s DAG, generated using visNetwork package: (image shows DAG complex example pipeline.) static documents, can use rxp_ggdag() uses ggdag hood: DAG can also return underlying igraph object plot DAG using tools: saves dag.dot object project’s _rixpress/ folder. reviewing DAG, can build pipeline running rxp_make() instead modifying original rxp_populate() call.","code":"rxp_populate(derivs) rxp_dag_for_ci()"},{"path":"https://b-rodrigues.github.io/rixpress/articles/core-functions.html","id":"tracing-the-lineage-of-derivations","dir":"Articles","previous_headings":"Optional steps before building the pipeline","what":"Tracing the lineage of derivations","title":"Core rixpress Functions and Usage","text":"possible also trace lineage individual derivations using rxp_trace(). example: return: makes quite easy quickly double check whether derivations defined correctly. * symbol next derivation’s name indicates transitive dependency. Calling rxp_trace() without arguments shows whole graph: now ready actually build artifacts. also quite useful debugging, detailed vignette(\"debugging\").","code":"rxp_trace(\"mtcars_mpg\") ==== Lineage for: mtcars_mpg ==== Dependencies (ancestors):   - mtcars_head     - mtcars_am*       - mtcars*   - mtcars_tail     - mtcars_head*  Reverse dependencies (children):           - page  Note: '*' marks transitive dependencies (depth >= 2). rxp_trace() ==== Pipeline dependency tree (outputs → inputs) ==== - page   - mtcars_head     - mtcars_am*       - mtcars*   - mtcars_tail     - mtcars_head*   - mtcars_mpg     - mtcars_head*     - mtcars_tail*  Note: '*' marks transitive dependencies (depth >= 2)."},{"path":"https://b-rodrigues.github.io/rixpress/articles/core-functions.html","id":"building-and-inspecting-outputs","dir":"Articles","previous_headings":"","what":"Building and inspecting outputs","title":"Core rixpress Functions and Usage","text":"run gen-pipeline.R (execute contents line--line), environment defined default.nix used (’s also possible define separate environments different derivations, ’ll cover later vignette). default, rxp_populate() doesn’t build pipeline, trigger build, use rxp_make(): see something like : Now can follow instructions: Use rxp_inspect() see outputs located. function particularly useful pipeline fails, shows derivations succeeded failed, captures error messages. Use rxp_read(\"mtcars_mpg\") read object current R session, rxp_load(\"mtcars_mpg\") load directly global environment. Alternatively, use rxp_copy(\"mtcars_mpg\") create folder called pipeline-outputs containing mtcars_mpg .rds file. call rxp_copy() without arguments, pipeline outputs copied folder.","code":"rxp_make() Build process started...  + > mtcars building + > mtcars_am building + > mtcars_head building + > mtcars_tail building + > mtcars_mpg building + > page building ✓ mtcars built ✓ mtcars_am built ✓ mtcars_head built ✓ mtcars_mpg built ✓ mtcars_tail built ✓ page built ✓ pipeline completed [6 completed, 0 errored] Build successful! Run `rxp_inspect()` for a summary. Use `rxp_read(\"derivation_name\")` to read objects or `rxp_load(\"derivation_name\")` to load them into the global environment."},{"path":"https://b-rodrigues.github.io/rixpress/articles/core-functions.html","id":"no-op-builds-for-individual-derivations","dir":"Articles","previous_headings":"","what":"No-op builds for individual derivations","title":"Core rixpress Functions and Usage","text":"can disable building specific derivation setting noop_build parameter TRUE. creates -op build, placeholder derivation performs work: derivations depend -op build also resolve -op builds. can useful prototyping debugging pipeline, allowing skip expensive unnecessary computations keeping dependency graph intact. details given vignette vignette(\"debugging\").","code":"rxp_r(   name = turtles,   expr = occurrence(species, geometry = atlantic),   noop_build = TRUE )"},{"path":"https://b-rodrigues.github.io/rixpress/articles/core-functions.html","id":"caveats","dir":"Articles","previous_headings":"","what":"Caveats","title":"Core rixpress Functions and Usage","text":"caveats need aware using rixpress. Due Nix works, certain things simply possible: mentioned vignette(\"intro-concepts\"), functions executed hermetic sandbox. need access external resource, build fail. example, use function get data API, must first retrieve data standard interactive R session, save disk, include pipeline. exception rxp_r_file(), can download file URL; functions need access internal resources, use additional_files argument rxp_r() include resources build sandbox; build artifacts saved Nix store, /nix/store/. working confidential data, make sure one else can access /nix/store path; proprietary R packages, need include Nix shell. primarily concern rix, generates execution environment. need help packaging proprietary packages, please open issue rix GitHub repository; multi-line expressions aren’t supported; write derivations single calls pure functions.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/core-functions.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Core rixpress Functions and Usage","text":"Now understand basic, high-level concepts, let’s move next vignette, vignette(\"tutorial\"), ’ll learn set pipeline start finish.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/debugging.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Effective debugging","text":"vignette guide primary debugging workflow rixpress, covering : Inspect error messages failed build. Trace dependency graph find structural problems. Isolate specific parts pipeline focused debugging. Access logs previous builds investigate regressions.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/debugging.html","id":"the-first-response-to-a-failed-build-rxp_inspect","dir":"Articles","previous_headings":"","what":"The First Response to a Failed Build: rxp_inspect()","title":"Effective debugging","text":"Imagine just run rxp_make() greeted error message console. build failed. immediate next step always run rxp_inspect(). default, function reads recent build log, case one failed run. return data frame summarizing status every derivation pipeline. Let’s look hypothetical output: two important columns debugging build_success error_message. build_success: TRUE/FALSE column immediately tells derivation failed. example, mtcars_head culprit. error_message: column contains standard error output captured Nix build process. provides exact reason failure. , message \"Error: function 'headd' found\" points simple typo R code. pinpointing specific derivation providing raw error message, rxp_inspect() eliminates guesswork directs straight source problem.","code":"Build process started...  + > mtcars building + > mtcars_am building + > mtcars_head building x mtcars_head errored ✓ mtcars built ✓ mtcars_am built ! pipeline completed [2 completed, 1 errored] Build failed! Run `rxp_inspect()` for a summary. rxp_inspect() derivation build_success                                               path    output 1 all-derivations         FALSE /nix/store/j5...-all-derivations       mtcars_head 2       mtcars_am          TRUE /nix/store/a4...-mtcars_am                  mtcars_am 3     mtcars_head         FALSE                                      <NA>          <NA> 4          mtcars          TRUE /nix/store/b9...-mtcars                       mtcars                                               error_message 1                                                      <NA> 2                                                      <NA> 3 Error: function 'headd' not found\\nExecution halted\\n 4                                                      <NA>"},{"path":"https://b-rodrigues.github.io/rixpress/articles/debugging.html","id":"investigating-structural-issues-with-rxp_trace","dir":"Articles","previous_headings":"","what":"Investigating Structural Issues with rxp_trace()","title":"Effective debugging","text":"Sometimes, pipeline fails typo single derivation, logical error derivations connected. rxp_trace() tool diagnosing structural issues. reads pipeline’s dependency graph (dag.json) helps answer questions like: “steps must run one?” (Dependencies) “change step, steps affected?” (Reverse Dependencies) instance, mtcars_mpg producing unexpected result, can trace lineage: might return: output clearly shows mtcars_mpg depends directly filtered_mtcars indirectly (transitively) mtcars. also shows final_report depends . expected mtcars_mpg depend different intermediate object, trace immediately reveal mistake pipeline definition. Calling rxp_trace() without arguments print entire dependency tree, useful getting high-level overview project’s structure. instead plot DAG using rxp_ggdag() example, project large, reading DAG difficult. rxp_trace() useful cases.","code":"rxp_trace(\"mtcars_mpg\") ==== Lineage for: mtcars_mpg ==== Dependencies (ancestors):   - filtered_mtcars     - mtcars*  Reverse dependencies (children):   - final_report  Note: '*' marks transitive dependencies (depth >= 2)."},{"path":"https://b-rodrigues.github.io/rixpress/articles/debugging.html","id":"a-proactive-strategy-isolating-derivations-with-noop_build","dir":"Articles","previous_headings":"","what":"A Proactive Strategy: Isolating Derivations with noop_build","title":"Effective debugging","text":"debugging prototyping, often need make frequent changes early step pipeline. slow, computationally expensive derivation depends changing step, development cycle can become painfully slow. Nix’s caching based inputs, change upstream step invalidate cache downstream steps. Imagine pipeline tuning data preprocessing step, followed lengthy model training process: scenario, every time adjust filter() condition preprocessed_data, Nix correctly invalidates cache expensive_model. means hours-long simulation re-triggered every small change, making impossible iterate quickly preprocessing logic. perfect use case noop_build = TRUE. applying expensive downstream step, temporarily break dependency chain: Now, run rxp_make(), preprocessed_data build normal. However, expensive_model resolve -op build, final_report depends , also become -op. allows rapidly iterate validate preprocessed_data logic isolation, without waiting simulation run. satisfied preprocessing, simply remove noop_build = TRUE re-enable full pipeline run expensive model training finalized data.","code":"list(   # We are actively changing the filter condition in this step   rxp_r(     name = preprocessed_data,     expr = filter(raw_data, year > 2020)   ),   # This step takes hours to run   rxp_r(     name = expensive_model,     expr = run_long_simulation(preprocessed_data)   ),   rxp_rmd(     name = final_report,     rmd_file = \"report.Rmd\" # Depends on expensive_model   ) ) list(   # We can now change this step as much as we want   rxp_r(     name = preprocessed_data,     expr = filter(raw_data, year > 2020)   ),   # This and all downstream steps will be skipped   rxp_r(     name = expensive_model,     expr = run_long_simulation(preprocessed_data),     noop_build = TRUE   ),   rxp_rmd(     name = final_report,     rmd_file = \"report.Rmd\" # Also becomes a no-op   ) )"},{"path":"https://b-rodrigues.github.io/rixpress/articles/debugging.html","id":"historical-debugging-going-back-in-time","dir":"Articles","previous_headings":"","what":"Historical Debugging: Going Back in Time","title":"Effective debugging","text":"iterating quickly, might useful compare results ones obtained previous runs. possible check results previous runs using logs. First, use rxp_list_logs() see build history: can see successful build yesterday (20250814). find differences today’s results, can inspect specific log providing unique part filename which_log: allows compare yesterday’s build summary today’s one. Furthermore, can use rxp_read() which_log load actual artifact previous run, invaluable comparing data model outputs across different versions pipeline.","code":"rxp_list_logs() filename   modification_time size_kb 1 build_log_20250815_113000_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6.rds 2025-08-15 11:30:00    0.51 2 build_log_20250814_170000_z9y8x7w6v5u4t3s2r1q0p9o8n7m6l5k4.rds 2025-08-14 17:00:00    0.50 # Inspect yesterday's successful build log rxp_inspect(which_log = \"20250814\") # Load the output of `mtcars_head` from yesterday's build old_head <- rxp_read(\"mtcars_head\", which_log = \"20250814\")"},{"path":"https://b-rodrigues.github.io/rixpress/articles/debugging.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Effective debugging","text":"Debugging rixpress systematic process supported powerful set tools. following workflow, can efficiently resolve issues pipelines: runtime errors, start rxp_inspect() find failed derivation error message. logical structural errors, use rxp_trace() understand dependencies. speed iteration, use noop_build = TRUE isolate part pipeline working . regressions, use rxp_list_logs() which_log argument travel back time compare results.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/gc.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Managing Cached Build Artifacts","text":"Becuse rixpress uses Nix build engine, every build artifact cached Nix store (/nix/store). modify pipeline, new artifacts created, old ones remain. powerful allows access complete history work. However, time, can lead Nix store consuming significant amount disk space. vignette explains manage cache using rxp_gc() function, provides safe targeted way garbage-collect old build artifacts.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/gc.html","id":"build-logs-the-key-to-your-pipelines-history","dir":"Articles","previous_headings":"","what":"Build Logs: The Key to Your Pipeline’s History","title":"Managing Cached Build Artifacts","text":"discuss cleaning , ’s important understand rixpress keeps track artifacts. Every time run rxp_make(), detailed build log saved project’s _rixpress directory. logs record outcome derivation , crucially, exact path output Nix store. can see list historical builds rxp_list_logs(): logs foundation debugging retrieving historical data. deep dive use troubleshooting, please see vignette(\"debugging\"). now, just remember logs rxp_gc() uses intelligently clean cache.","code":"rxp_list_logs() #>                                                         filename   modification_time size_kb #> 1 build_log_20250815_113000_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6.rds 2025-08-15 11:30:00    0.51 #> 2 build_log_20250814_170000_z9y8x7w6v5u4t3s2r1q0p9o8n7m6l5k4.rds 2025-08-14 17:00:00    0.50"},{"path":"https://b-rodrigues.github.io/rixpress/articles/gc.html","id":"cleaning-up-artifacts-with-rxp_gc","dir":"Articles","previous_headings":"","what":"Cleaning Up Artifacts with rxp_gc()","title":"Managing Cached Build Artifacts","text":"rxp_gc() function primary tool managing project’s storage footprint. operates two distinct modes.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/gc.html","id":"targeted-deletion-cleaning-up-old-builds","dir":"Articles","previous_headings":"Cleaning Up Artifacts with rxp_gc()","what":"1. Targeted Deletion: Cleaning Up Old Builds","title":"Managing Cached Build Artifacts","text":"common use case remove artifacts builds longer needed, keeping recent ones. done specifying keep_since argument. function identify build logs older given date attempt delete log files associated Nix store paths. deleting anything, highly recommended perform dry_run. print detailed report actions taken, without actually modifying system. avoid mistakes, default behaviour rxp_gc(): output list log files Nix store paths targeted deletion. reviewed plan confident, can perform actual cleanup setting dry_run = FALSE. function prompt confirmation proceeding. intelligently protects artifacts recent builds, don’t worry accidentally deleting something still need. Note paths may deleted still referenced parts system (like result symlink active nix-shell). rxp_gc() handles gracefully report paths “skipped”.","code":"# Preview what would be deleted if we keep artifacts from August 1st, 2025 onward. rxp_gc(keep_since = \"2025-08-01\", dry_run = TRUE) # dry_run = TRUE is actually the default # Keep builds from the last 30 days and delete everything older. thirty_days_ago <- Sys.Date() - 30 rxp_gc(keep_since = thirty_days_ago)"},{"path":"https://b-rodrigues.github.io/rixpress/articles/gc.html","id":"full-garbage-collection","dir":"Articles","previous_headings":"Cleaning Up Artifacts with rxp_gc()","what":"2. Full Garbage Collection","title":"Managing Cached Build Artifacts","text":"wish perform complete, system-wide cleanup, can call rxp_gc() arguments. equivalent running nix-store --gc terminal. delete unreferenced paths Nix store, just related current project. powerful way reclaim large amount disk space, remove cached artifacts Nix-based projects environments system. Use option certain longer need old, unreferenced build caches.","code":"# This will trigger a full Nix garbage collection. rxp_gc()"},{"path":"https://b-rodrigues.github.io/rixpress/articles/gc.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Managing Cached Build Artifacts","text":"Nix store’s caching powerful feature reproducibility, requires occasional maintenance. rxp_gc() provides tools need manage cache effectively. Use rxp_gc(keep_since = ...) routine, project-specific cleanup. Use rxp_gc() arguments aggressive, system-wide cleanup.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/importing-data.html","id":"importing-a-single-local-file","dir":"Articles","previous_headings":"","what":"Importing a single local file","title":"Importing Data Files","text":"straightforward case reading single data file local project directory. need provide name resulting R object, path file, read_function process . example, rxp_r_file creates derivation : Copies data/mtcars.csv sandboxed build environment. Executes provided anonymous function, \\(x) (read.csv(file = x, sep =    \"|\")), x path copied file inside sandbox. Saves resulting data frame object named mtcars subsequent steps pipeline.","code":"library(rixpress)  list(   rxp_r_file(     name = mtcars,     path = 'data/mtcars.csv',     read_function = \\(x) (read.csv(file = x, sep = \"|\"))   ), ..."},{"path":"https://b-rodrigues.github.io/rixpress/articles/importing-data.html","id":"importing-a-single-file-from-the-internet","dir":"Articles","previous_headings":"","what":"Importing a single file from the internet","title":"Importing Data Files","text":"can also directly import file URL. Simply provide URL path. rixpress handles download ensures reproducibility caching file using cryptographic hash. Behind scenes, rixpress uses Nix fetch file, ensuring exact version file used every time pipeline run. time build sandbox can access remote file: ’s file actually gets downloaded Nix ahead time. need access data real-time API, ’ll need download data outside rixpress pipeline, import pipeline using rxp_r_file().","code":"library(rixpress)  list(   rxp_r_file(     name = mtcars,     path = 'https://raw.githubusercontent.com/b-rodrigues/rixpress_demos/refs/heads/master/basic_r/data/mtcars.csv',     read_function = \\(x) (read.csv(file = x, sep = \"|\"))   ), ..."},{"path":"https://b-rodrigues.github.io/rixpress/articles/importing-data.html","id":"importing-many-files-from-a-directory","dir":"Articles","previous_headings":"","what":"Importing many files from a directory","title":"Importing Data Files","text":"Often, need import combine multiple files single directory. , set path argument directory’s path. read_function receive path directory inside build environment must contain logic handle files within. example R reads files data directory: ’s similar example using Python, calls user-defined function read_many_csvs external script: Python function looks like: cases, entire data directory copied build sandbox, read_function responsible listing files reading .","code":"library(rixpress)  list(   rxp_r_file(     name = mtcars_r,     path = 'data',     read_function = \\(x) {       (readr::read_delim(list.files(x, full.names = TRUE), delim = '|'))     }   ) ) |>   rxp_populate(project_path = \".\") library(rixpress)  list(   rxp_py_file(     name = mtcars_py,     path = 'data',     read_function = \"read_many_csvs\",     user_functions = \"functions.py\"   ) ) |>   rxp_populate(project_path = \".\") import polars from pathlib import Path  def read_many_csvs(dir_path):     folder = Path(dir_path)     csv_files = folder.glob(\"*.csv\")     return polars.concat([polars.read_csv(f) for f in csv_files])"},{"path":"https://b-rodrigues.github.io/rixpress/articles/importing-data.html","id":"importing-files-with-dependencies-e-g--shapefiles","dir":"Articles","previous_headings":"","what":"Importing files with dependencies (e.g., Shapefiles)","title":"Importing Data Files","text":"file formats, like ESRI Shapefile, consist multiple “sidecar” files (e.g., .shp, .shx, .dbf) must present together data read correctly. Even though might point read function .shp file, component files need directory. rixpress handles allowing specify directory path. ensures necessary files copied build environment. However, must provide full path main file inside build environment within read_function. rixpress pipeline, local files directories specified path copied sub-directory called input_folder. Therefore, path data inside Nix sandbox input_folder/YOUR_PATH. following example shows read shapefile using Python geopandas: ’s happens: path = 'data' argument tells rixpress copy entire data directory sandbox. Inside sandbox, shapefile located input_folder/data/oceans.shp. read_function lambda function explicitly calls geopandas.read_file hardcoded path, allowing find .shp file necessary sidecar files. perhaps cleaner alternative write function takes path data folder input, function look folder shapefile, pass path geopandas.read_file. example can rewrite derivation like : (assuming function defined script called functions.py). Python function also uses glob os, need import functions using add_import(). can add just calling rxp_populate():","code":"library(rixpress)  list(   rxp_py_file(     name = gdf,     # We provide the directory 'data' to ensure all shapefile components are copied.     path = 'data',     # The read_function must use the hardcoded path within the build environment.     read_function = \"lambda x: geopandas.read_file('input_folder/data/oceans.shp', driver='ESRI Shapefile')\"   ),    rxp_py(     name = sa,     py_expr = \"gdf.loc[gdf['Oceans'] == 'South Atlantic Ocean']['geometry'].loc[0]\"   ) ) |>   rxp_populate(project_path = \".\") def read_shp(path_folder):     # Look for files ending with .shp in the given folder     candidates = glob.glob(os.path.join(path_folder, \"*.shp\"))     if not candidates:         raise FileNotFoundError(f\"No .shp file found in {path_folder}\")      shapefile = candidates[0]     return gpd.read_file(shapefile, driver=\"ESRI Shapefile\") rxp_py_file(     name = gdf,     path = 'data',     read_function = \"read_shp\",     user_functions = \"functions.py\"   ), rxp_populate(     project_path = \".\",     py_imports = c(geopandas = \"import geopandas as gpd\")   )  # This is needed for the function defined in functions.py add_import(\"import os\", \"default.nix\") add_import(\"import glob\", \"default.nix\")"},{"path":"https://b-rodrigues.github.io/rixpress/articles/importing-data.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Importing Data Files","text":"rxp_*_file functions rixpress offer powerful consistent interface ingesting data reproducible pipelines, whether data lives locally, web, single file, collection files. understanding specify path tailor read_function, can handle wide variety data import tasks.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/intro-concepts.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Introductory concepts","text":"Nix terminology, derivation specification running executable precisely defined input files repeatably produce output files uniquely determined file system paths. (source) simpler terms, derivation recipe precisely defined inputs, steps, fixed output. means given identical inputs build steps, exact output always produced. achieve level reproducibility, several important measures must taken: inputs derivation must explicitly declared. Inputs include just data files, also software dependencies, configuration flags, environment variables, essentially anything necessary build process. build process takes place hermetic sandbox ensure exact output always produced. next sections document explain three points detail.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/intro-concepts.html","id":"derivations","dir":"Articles","previous_headings":"","what":"Derivations","title":"Introductory concepts","text":"example simple Nix expression: won’t go details , ’s important code uses awk, common Unix data processing tool, filter mtcars.csv file keep rows 9th column (column) equals 1. can see, significant amount boilerplate code required perform simple operation. However, approach completely reproducible: dependencies declared pinned specific dated branch rstats--nix/nixpkgs fork, thing make pipeline fail (though ’s bit stretch call pipeline) mtcars.csv file provided . add another step uses filtered.csv input continue processing . label code f subsequent chunk Nix code g, adding another step essentially result following computation: mtcars |> f |> g, f g pure functions, pipeline thus composition pure functions. Nix builds filtered.csv two steps: first generates derivation expression, builds . clarity document, ’ll refer code like example derivation rather expression, avoid confusion concept expression R. goal rixpress help write pipelines like mtcars |> f |> g without needing learn Nix, still benefiting powerful reproducibility features.","code":"let   pkgs = import (fetchTarball \"https://github.com/rstats-on-nix/nixpkgs/archive/2025-04-11.tar.gz\") {}; in pkgs.stdenv.mkDerivation {   name = \"filtered_mtcars\";   buildInputs = [ pkgs.gawk ];   dontUnpack = true;   src = ./mtcars.csv;   installPhase = ''     mkdir -p $out     awk -F',' 'NR==1 || $9==\"1\" { print }' $src > $out/filtered.csv   ''; }"},{"path":"https://b-rodrigues.github.io/rixpress/articles/intro-concepts.html","id":"dependencies-of-derivations","dir":"Articles","previous_headings":"","what":"Dependencies of derivations","title":"Introductory concepts","text":"Nix requires dependencies derivation explicitly listed managed Nix . ’re building output requires, example, Quarto, Quarto must explicitly listed input, even already Quarto installed system. applies Quarto’s dependencies, dependencies dependencies, way common ancestor packages. Nix, run linear regression R, essentially need build entire universe dependencies first. Nix terms, complete set packages dependencies author, Eelco Dolstra, refers component closures: idea always deploy component closures: deploy component, must also deploy dependencies, dependencies, . , must always deploy set components closed ‘’depends ’’ relation. Since closures self-contained, units complete software deployment. , set components closed, safe deploy, since using might cause components referenced missing target system. (Nix: Safe Policy-Free System Software Deployment, Dolstra et al., 2004). figure , paper, illustrates idea: Figure 4 Dolstra et al. (2004) figure, subversion depends openssl, depends glibc. Similarly, write derivation builds data frame filtering mtcars, derivation requires: input file, mtcars.csv. R potentially R packages like dplyr. R’s dependencies dependencies R packages. dependencies dependencies (way ). must managed Nix. dependency exists “outside” component closure available machine, pipeline work machine - defeating purpose reproducibility! (noted, however, sometimes good reasons dependency managed Nix, case might prefer use targets running inside Nix shell instead rixpress, situations exception rather rule). Nix distinguishes different types dependencies (buildInputs, nativeBuildInputs, propagatedBuildInputs, propagatedNativeBuildInputs), let’s skip concept, relevant packaging upstream software, defining pipelines. ’re curious, read .","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/intro-concepts.html","id":"the-nix-store-and-hermetic-builds","dir":"Articles","previous_headings":"","what":"The Nix store and hermetic builds","title":"Introductory concepts","text":"building derivations, outputs saved Nix store. Typically located /nix/store/, folder contains software build artifacts produced Nix. example, write derivation computes tail file named mtcars.csv, derivation built, output stored path like /nix/store/81k4s9q652jlka0c36khpscnmr8wk7jb-mtcars_tail. long cryptographic hash uniquely identifies build output computed based content derivation along inputs dependencies. ensures build fully reproducible. result, building derivation two different machines yield cryptographic hash, can substitute built artifact derivation generates one--one. analogous mathematics: consider function f(x):=x2f(x):= x^2, writing f(2)f(2) 44 represents value. mechanism makes possible import export build artifacts pipelines avoid rebuild everything scratch different machines continuous integration platforms. rixpress two functions allow , called rxp_export_artifacts() rxp_import_artifacts(). ensure building derivations always produces exactly outputs, builds must occur isolated environment, often referred sandbox. approach, known hermetic build process, ensures build unaffected external factors state host system. isolation extends environment variables well. example, R users might set variable JAVA_HOME make R aware Java runtime installed. However, Java required derivation, setting JAVA_HOME outside sandbox effect; must explicitly set within sandbox. isolation also means need access API download data, won’t work Internet connection allowed within build sandbox. may seem restrictive, makes perfect sense goal achieve complete reproducibility. Consider scenario need use function f() access API get data analysis. guarantee running f() today yield result running f() six months year? API even still online? true reproducibility, obtain data API , version archive , continue using archived data analysis (share anyone might want reproduce study).","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/intro-concepts.html","id":"summary-and-conclusion","dir":"Articles","previous_headings":"","what":"Summary and conclusion","title":"Introductory concepts","text":"explained beginning vignette, Nix generates derivation Nix expression process called instantiation. Writing reproducible pipeline Nix directly require writing long complex Nix expressions. rixpress comes - handles complexity . instantiation, Nix processes declarations, resolves inputs (including source files, build scripts, external dependencies), computes unique cryptographic hash. hash derived contents derivation entire dependency graph, forming part derivation’s identity. ensures even smallest change inputs result distinct derivation, guaranteeing reproducibility. avoid confusion concept expression R, throughout documentation refer Nix expressions derivations. instantiated, derivations can built. build process, Nix constructs isolated, hermetic environment explicitly declared dependencies available. makes build entirely deterministic, meaning identical inputs always produce identical outputs, regardless machine environment. isolation improves reliability facilitates debugging maintenance eliminating external variables. successful build, Nix stores output Nix store (typically /nix/store/). example, build derivation processes mtcars.csv file, output might saved unique path like /nix/store/81k4s9q652jlka0c36khpscnmr8wk7jb-mtcars_tail. cryptographic hash computed based derivation’s inputs build process. anything changes, hash different. extremely precise - even changing separator mtcars.csv data set , | result different hash, even though resulting mtcars_tail object might look identical us. Nix’s perspective, ’re different one inputs different. key take-away Nix complex tool solves complex problem: ensuring complete reproducibility across different environments time. rixpress rix packages designed make Nix accessible R users, allowing benefit Nix’s reproducibility without learn complexities. Now ’re familiar basic Nix concepts, let’s move next vignette ’ll set first basic pipeline: vignette(\"core-functions\") (wish learn scope roadmap package, can also take look vignette(\"scope\") first).","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/polyglot-julia.html","id":"generating-waveshaders-data-using-julia-and-plotting-it-using-r","dir":"Articles","previous_headings":"","what":"Generating waveshaders data using Julia and plotting it using R","title":"Polyglot pipelines with Julia and R","text":"example provided Moritz Schauer (@mschauer). example adapted : https://github.com/frankiethull/waveshaders/tree/main/experiments/simple_example rixpress makes easy write polyglot (multilingual) data science pipelines derivations run R Julia code. vignette explains can easily set pipeline.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/polyglot-julia.html","id":"setting-up-the-environment","dir":"Articles","previous_headings":"Generating waveshaders data using Julia and plotting it using R","what":"Setting up the environment","title":"Polyglot pipelines with Julia and R","text":"Start project calling rixpress::rxp_init() edit gen-env.R. can open gen-env.R favourite text editor define execution environment . Julia R polyglot pipeline, ’ll need add Julia configuration: Notice jl_conf argument rix(): install Julia listed Julia packages environment. Now ’ve defined execution environment pipeline, can run gen-env.R script, still temporary Nix shell running source(\"gen-env.R\"). generate required default.nix. , quit R temporary shell (CTRL-D quit() R, exit terminal) build environment defined freshly generated default.nix typing nix-build. now build execution environment pipeline. can use environment work project interactively usual. learn , check {rix}.","code":"library(rix)  rix(   date = \"2025-05-19\",   r_pkgs = c(     \"arrow\",     \"dplyr\",     \"tidyr\",     \"ggplot2\",     \"hexbin\"   ),   git_pkgs = list(     list(       package_name = \"rix\",       repo_url = \"https://github.com/ropensci/rix/\",       commit = \"HEAD\"     ),     list(       package_name = \"rixpress\",       repo_url = \"https://github.com/b-rodrigues/rixpress\",       commit = \"HEAD\"     )   ),   jl_conf = list(     jl_version = \"1.10\",     jl_pkgs = c(       \"Arrow\",       \"DataFrames\",       \"SparseArrays\",       \"LinearAlgebra\"     )   ),   ide = \"none\",   project_path = \".\",   overwrite = TRUE )"},{"path":"https://b-rodrigues.github.io/rixpress/articles/polyglot-julia.html","id":"creating-the-pipeline","dir":"Articles","previous_headings":"Generating waveshaders data using Julia and plotting it using R","what":"Creating the pipeline","title":"Polyglot pipelines with Julia and R","text":"can now edit pipeline script gen-pipeline.R. ’s example pipeline uses R Julia: Let’s break ’s happening pipeline: First, define simple variable called d_size, equals 150. Second, define variable called data, uses function define called gridlaplacian (described ). , convert data data frame save using Arrow. step previous one executed Julia. import data R prepare plotting. Finally, plot data using ggplot2.","code":"library(rixpress) library(igraph)  list(   rxp_jl(d_size, '150'),    rxp_jl(     data,     \"0.1randn(d_size,d_size) + reshape( \\     cholesky(gridlaplacian(d_size,d_size) + 0.003I) \\\\ randn(d_size*d_size), \\     d_size, \\     d_size \\     )\",     user_functions = \"functions.jl\"   ),    rxp_jl(     laplace_df,     'DataFrame(data, :auto)',     serialize_function = 'arrow_write',     user_functions = \"functions.jl\"   ),    rxp_r(     laplace_long_df,     prepare_data(laplace_df),     unserialize_function = 'read_ipc_file',     user_functions = \"functions.R\"   ),    rxp_r(     gg,     make_gg(laplace_long_df)   )  ) |>   rxp_populate(build = TRUE)"},{"path":"https://b-rodrigues.github.io/rixpress/articles/polyglot-julia.html","id":"helper-functions","dir":"Articles","previous_headings":"Generating waveshaders data using Julia and plotting it using R","what":"Helper functions","title":"Polyglot pipelines with Julia and R","text":"pipeline work, need define helper functions R Julia. Let’s look Julia functions first: R functions: functions used appropriate derivations using user_functions argument.","code":"# Define the precision matrix (inverse covariance matrix) # for the Gaussian noise matrix. It approximately coincides # with the Laplacian of the 2d grid or the graph representing # the neighborhood relation of pixels in the picture, # https://en.wikipedia.org/wiki/Laplacian_matrix  function gridlaplacian(m, n)     S = sparse(0.0I, n*m, n*m)     linear = LinearIndices((1:m, 1:n))     for i in 1:m         for j in 1:n             for (i2, j2) in ((i + 1, j), (i, j + 1))                 if i2 <= m && j2 <= n                     S[linear[i, j], linear[i2, j2]] -= 1                     S[linear[i2, j2], linear[i, j]] -= 1                     S[linear[i, j], linear[i, j]] += 1                     S[linear[i2, j2], linear[i2, j2]] += 1                 end             end         end     end     return S end  function arrow_write(df, path)     Arrow.write(path, df) end prepare_data <- function(laplace){   laplace_df |>     mutate(       x_id = row_number()     ) |>     tidyr::pivot_longer(-x_id, names_to = \"y_id\", values_to = \"z\") |>     mutate(       y_id = gsub(\"x\", \"\", y_id),       y_id = as.numeric(y_id)     ) }  make_gg <- function(laplace_long_df){   laplace_long_df |>     ggplot(aes(x = x_id, y = y_id, z = z)) +     stat_summary_hex(fun = function(x) mean(x), bins = 45)  +     scale_fill_viridis_c(option = 12) +     theme_void() +     theme(legend.position = \"none\") +     labs(subtitle = \"hexagonal 2-d heatmap of laplacian matrix\") }  save_gg <- function(path, gg){   ggsave(\"gg.png\", gg) }"},{"path":"https://b-rodrigues.github.io/rixpress/articles/polyglot-julia.html","id":"data-transfer-between-r-and-julia","dir":"Articles","previous_headings":"Generating waveshaders data using Julia and plotting it using R","what":"Data transfer between R and Julia","title":"Polyglot pipelines with Julia and R","text":"working R Julia (Python, matter), ’s important understand data transferred two languages. example, ’re using Arrow save file interchangeable format. Julia, save using arrow_write() wrapper around Arrow.write(path, df). , R, can use arrow::read_ipc_file() read file back.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/polyglot-julia.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Polyglot pipelines with Julia and R","text":"rixpress makes easy combine strengths R Julia single pipeline. using Nix manage environments Arrow (formats) data transfer, can create reproducible polyglot pipelines leverage best languages. examples advanced usage, check rixpress_demos repository.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/polyglot.html","id":"analysing-the-mtcars-dataset-using-r-and-python","dir":"Articles","previous_headings":"","what":"Analysing the mtcars dataset using R and Python","title":"Polyglot pipelines and literate programming with Quarto or R Markdown","text":"rixpress makes easy write polyglot (multilingual) data science pipelines derivations run R Python code. vignette explains can easily set pipeline. Let’s assume Nix installed system, R installation (ideal scenario: plan use Nix full-time development environments, shouldn’t system-wide installation R). installing R R packages pipeline, install cachix configure rstats--nix cache. way, pre-compiled, binary packages used instead built source. Run following line terminal: use cache: might message telling add user configuration file executing another command. , follow instructions; need per machine want use rixpress . Many thanks Cachix sponsoring rstats--nix cache! Now cache configured, ’s time bootstrap development environment. Run line: drop temporary shell R rix rixpress available. Simply start R typing R, load rixpress call rxp_init() generate two files, gen-env.R gen-pipeline.R. can open gen-env.R favourite text editor define execution environment : Notice py_conf argument rix(): install Python listed Python packages environment. ’ll notice add reticulate list R packages install well; primarily converting data R Python ’re using universal format like JSON. Python build steps executed standard Python shell require reticulate Python code execution , ’re using JSON transfer data, reticulate required. prefer, can also use uv manage Python Python packages. pure Nix solution, still useful cases need specific Python package might available Nix, PyPI packages available Nix. case, refer section Installing R Python packages Nix environment vignette rix. Now defined execution environment pipeline, can run gen-env.R script, still temporary Nix shell running source(\"gen-env.R\"). generate required default.nix. , quit R temporary shell (CTRL-D quit() R, exit terminal) build environment defined freshly generated default.nix typing nix-build. now build execution environment pipeline. can use environment work project interactively usual. learn , check {rix}. can now edit pipeline script gen-pipeline.R: can see, starts reading data using Python polars package, converts R data frame manipulation, converts back Python data frame back R. ’ll notice point head data computed using user-defined function called my_head(). User-defined functions go script called functions.R functions.py derivations use need aware setting user_functions argument. derivations need files available sandbox, listed additional_files argument. main difference rxp_py() rxp_r() Python code passed string, expression. ’s also import Python define packages imported. case, want polars imported using import polars pl, need use py_imports argument rxp_populate(). possible skip , ’d need write entire package name time: polars.read_csv(). sometimes mandatory, example want import package’s submodule: package called pillow, rixpress write statement import pillow, simply work. want use JSON transfer data derivations, use serialize_function unserialize_function arguments respectively: Python serialize_to_json function defined functions.py script looks like : serialize_function unserialize_function arguments can used serialise objects using function, example qs::save() machine learning-specific functions specific models, xgboost.","code":"nix-env -iA cachix -f https://cachix.org/api/v1/install cachix use rstats-on-nix nix-shell --expr \"$(curl -sl https://raw.githubusercontent.com/ropensci/rix/main/inst/extdata/default.nix)\" library(rix)  rix(   date = \"2025-03-31\",   r_pkgs = c(\"dplyr\", \"igraph\", \"reticulate\", \"quarto\"),   git_pkgs = list(     package_name = \"rixpress\",     repo_url = \"https://github.com/b-rodrigues/rixpress\",     commit = \"HEAD\"   ),   py_conf = list(     py_version = \"3.12\",     py_pkgs = c(\"pandas\", \"polars\", \"pyarrow\")   ),   ide = \"none\",   project_path = \".\",   overwrite = TRUE ) library(rixpress) library(igraph)  list(   rxp_py_file(     name = mtcars_pl,     path = 'data/mtcars.csv',     read_function = \"lambda x: pl.read_csv(x, separator='|')\"   ),    rxp_py(     # reticulate doesn't support polars DFs yet, so need to convert     # first to pandas DF     name = mtcars_pl_am,     py_expr = \"mtcars_pl.filter(pl.col('am') == 1).to_pandas()\"   ),    rxp_py2r(     name = mtcars_am,     expr = mtcars_pl_am   ),    rxp_r(     name = mtcars_head,     expr = my_head(mtcars_am),     user_functions = \"functions.R\"   ),    rxp_r2py(     name = mtcars_head_py,     expr = mtcars_head   ),    rxp_py(     name = mtcars_tail_py,     py_expr = 'mtcars_head_py.tail()'   ),    rxp_py2r(     name = mtcars_tail,     expr = mtcars_tail_py   ),    rxp_r(     name = mtcars_mpg,     expr = dplyr::select(mtcars_tail, mpg)   ),    rxp_qmd(     name = page,     qmd_file = \"my_doc/page.qmd\",     additional_files = c(\"my_doc/content.qmd\", \"my_doc/images\")   ) ) |>   rxp_populate(     project_path = \".\",     py_imports = c(polars = \"import polars as pl\")   ) py_imports = c(pillow = \"from PIL import Image\") library(rixpress) library(igraph)  list(   rxp_py_file(     name = mtcars_pl,     path = \"data/mtcars.csv\",     read_function = \"lambda x: pl.read_csv(x, separator='|')\"   ),    rxp_py(     name = mtcars_pl_am,     py_expr = \"mtcars_pl.filter(pl.col('am') == 1)\",     user_functions = \"functions.py\",     serialize_function = \"serialize_to_json\",   ),    rxp_r(     name = mtcars_head,     expr = my_head(mtcars_pl_am),     user_functions = \"functions.R\",     unserialize_function = \"jsonlite::fromJSON\"   ),    rxp_r(     name = mtcars_mpg,     expr = dplyr::select(mtcars_head, mpg)   ) ) |>   rxp_populate(     project_path = \".\",     py_imports = c(polars = \"import polars as pl\")   )  # Plot DAG for CI rxp_dag_for_ci() def serialize_to_json(pl_df, path):     with open(path, 'w') as f:         f.write(pl_df.write_json())"},{"path":"https://b-rodrigues.github.io/rixpress/articles/polyglot.html","id":"building-a-quarto-or-r-markdown-document","dir":"Articles","previous_headings":"","what":"Building a Quarto or R Markdown document","title":"Polyglot pipelines and literate programming with Quarto or R Markdown","text":"last pipeline want discuss builds Quarto document using rxp_qmd() (use rxp_rmd() R Markdown document). , additional_files argument used make derivation aware required files build document. source document looks like: Just like interactive session, rxp_read() used retrieve objects store. See refer document content.qmd image meme.png. want add arguments Quarto command line tool, can use args argument: don’t forget add typst list system packages call rix(): examples, check rixpress_demos repository. examples demonstrate additional features rixpress, including: Using Python ‘xgboost’ library transferring data R Importing multiple files Using multiple environments instead single default.nix file many others! Don’t hesitate submit examples well!","code":"--- title: \"Loading derivations outputs in a quarto doc\" format:   html:     embed-resources: true     toc: true ---  ![Meme](images/meme.png)  Use `rxp_read()` to show object in the document:  ``` #| eval: true  rixpress::rxp_read(\"mtcars_head\") ```  ``` #| eval: true  rixpress::rxp_read(\"mtcars_tail\") ```  ``` #| eval: true  rixpress::rxp_read(\"mtcars_mpg\") ```  {{< include content.qmd >}}  ``` #| eval: true  rixpress::rxp_read(\"mtcars_tail_py\") ``` rxp_qmd(   name = page,   qmd_file = \"my_doc/page.qmd\",   additional_files = c(\"my_doc/content.qmd\", \"my_doc/images\"),   args = \"--to typst\" ) rix(   date = \"2025-03-31\",   r_pkgs = c(\"dplyr\", \"igraph\", \"reticulate\", \"quarto\"),   system_pkgs = \"typst\",   git_pkgs = list(..."},{"path":"https://b-rodrigues.github.io/rixpress/articles/scope.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Scope and Roadmap","text":"rixpress focuses “micropipelines”: pipelines executed single machine small--medium projects, strong, reproducible environments via Nix simple, pragmatic user experience R. document clarifies rixpress , lays short roadmap users contributors can align expectations proposals. Key goals: Single-machine, small--medium pipelines (“micropipelines”). Reproducible builds pinned Nix. Simple DAG wiring, minimal ceremony. Polyglot steps R first-class, pragmatic Python/Julia interop. CI-friendly (e.g., GitHub Actions) without requiring distributed stacks.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/scope.html","id":"what-rixpress-is","dir":"Articles","previous_headings":"","what":"What rixpress is","title":"Scope and Roadmap","text":"thin, opinionated bridge R Nix building pipelines locally. way define steps (R / Python / Julia / Quarto/Rmd) Nix derivations. parse DAG steps, generate build Nix pipeline, store artifacts Nix store, read/load/copy outputs back R (interoperate Python/Julia). “just enough” visualisation layer inspect DAG understand dependencies, geared toward small--medium graphs.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/scope.html","id":"what-rixpress-is-not","dir":"Articles","previous_headings":"","what":"What rixpress is not","title":"Scope and Roadmap","text":"distributed workflow engine (cluster schedulers, multi-node orchestration). long-running workflow daemon, task scheduler, job server. general-purpose ETL/ELT framework large datasets streaming workloads. feature-rich dashboarding / progress-tracking UI. pluggable storage abstraction beyond Nix store. alternative DSL complex branching semantics dynamic targets (beyond Nix + current design support).","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/scope.html","id":"primary-audience","dir":"Articles","previous_headings":"","what":"Primary audience","title":"Scope and Roadmap","text":"R users (teams) want strong reproducibility via Nix without leaving R. Python users satisfied current solution micropipelines, ok defining pipeline R script. Research, analysis, reporting. Model training/evaluation modest scales. Lightweight ETL bounded datasets. Teams occasionally mix R steps Python/Julia, without adopting heavyweight orchestration platform.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/scope.html","id":"in-scope-features-current","dir":"Articles","previous_headings":"","what":"In-scope features (current)","title":"Scope and Roadmap","text":"Define R/Python/Julia/Quarto steps derivations (rxp_*()). Generate build Nix pipeline (rxp_populate(), rxp_make()). Serialise/deserialise basic interop (R↔︎Python/Julia) via common formats/APIs. Read/load/copy outputs Nix store (rxp_read(), rxp_load(), rxp_copy()). DAG generation simple visual inspection (local CI-friendly). CI support (GitHub Actions) cache import/export helpers.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/scope.html","id":"out-of-scope-features-not-planned","dir":"Articles","previous_headings":"","what":"Out-of-scope features (not planned)","title":"Scope and Roadmap","text":"Cluster execution, distributed scheduling, remote executors. Complex DSLs branching, runtime expansion, heavy dynamic targets. Pluggable storage backends Nix store. High-frequency streaming pipelines, message brokers, long-running services. Large-scale progress servers/dashboards. depending rixpress’s success outside contributions, features might implemented sometime future.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/scope.html","id":"roadmap","dir":"Articles","previous_headings":"","what":"Roadmap","title":"Scope and Roadmap","text":"roadmap lists “near-term”, “maybe later”, “planned” items clarify priorities. Timelines indicative may change.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/scope.html","id":"near-term-next-minor-releases","dir":"Articles","previous_headings":"Roadmap","what":"Near-term (next minor releases)","title":"Scope and Roadmap","text":"Robust expressions: support multi-line/brace R expressions rxp_r() emitting small script file build phase.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/scope.html","id":"maybe-later","dir":"Articles","previous_headings":"Roadmap","what":"Maybe later","title":"Scope and Roadmap","text":"Store helpers: summarise store size latest run conservative GC helper explicit confirmation. Visualisation: Mermaid-first DAG output (portable, text-first), simple CI rendering. Keep minimal interactive option large DAGs. Lightweight progress summaries: per-derivation timestamps build logs simple summaries. Optional: separate low-level Nix client package deeper integrations needed across rix rixpress.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/scope.html","id":"not-planned","dir":"Articles","previous_headings":"Roadmap","what":"Not planned","title":"Scope and Roadmap","text":"Distributed compute, cluster backends, server-side schedulers. Alternative storage engines backends beyond Nix store. Full-featured dashboards heavy progress monitoring services.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/scope.html","id":"how-to-propose-new-features","dir":"Articles","previous_headings":"","what":"How to propose new features","title":"Scope and Roadmap","text":"filing feature request, please: Read scope roadmap. Check existing issues discussions. separate package, optional companion tool, PR documentation (e.g., “-” current scope). file issue, please: - Explain use case scale (single machine, data sizes). - Clarify feature belongs rixpress vs. alternatives. - Suggest minimal interface preserves simplicity reproducibility.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/scope.html","id":"related-projects-and-inspiration","dir":"Articles","previous_headings":"","what":"Related projects and inspiration","title":"Scope and Roadmap","text":"Nix nixpkgs declarative, reproducible environments. rix defining Nix environments R. Micropipelines inspirations like Ploomber’s local-first approach (Python).","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/scope.html","id":"links","dir":"Articles","previous_headings":"","what":"Links","title":"Scope and Roadmap","text":"README: https://github.com/b-rodrigues/rixpress#readme Website: https://b-rodrigues.github.io/rixpress/ Demos: https://github.com/b-rodrigues/rixpress_demos","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/tutorial.html","id":"installing-the-required-software","dir":"Articles","previous_headings":"","what":"Installing the required software","title":"Setting up a pipeline from scratch: a tutorial","text":"’re using rixpress, ’re likely already familiar sister package rix, helps set reproducible development environments R Python using Nix. , likely already Nix installed system. , read following {rix} vignette learn set Nix Linux Windows, one ’re macOS. Nix installed (well cachix, rstats--nix cache configured), ’re ready go.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/articles/tutorial.html","id":"bootstrapping-a-project","dir":"Articles","previous_headings":"","what":"Bootstrapping a project","title":"Setting up a pipeline from scratch: a tutorial","text":"vignette, ’m going assume following: ’re already familiar Nix thanks rix; use Nix manage R environments data science projects (words, don’t system-installed R); Nix installed system well cachix configured rstats--nix cache; ’ve read previous two vignettes. ’re already familiar rix, likely know can use following command project’s root directory get access temporary Nix shell provides R, rix, rixpress: start Nix session. Type R start R session, type: write two files root project, gen-env.R gen-pipeline.R. gen-env.R look like : execute rixpress pipeline, environment needs rixpress available, likely require packages. Let’s add dplyr igraph (needed view graphical representation pipeline’s DAG). Open gen-env.R text editor change : ’ve added date, means versions R R packages set versions available date CRAN, ’ve added dplyr igraph. ’ve also added RStudio IDE. can now go back temporary Nix shell run Rscript gen-env.R (source(\"gen-env.R\") inside R session). create default.nix file project’s folder: Nix file defines environment. can now leave temporary shell first quitting R (applicable), typing CTRL-D exit. can build development environment using nix-build. Let’s now enter development shell typing nix-shell launch RStudio (whatever editor want use) open gen-pipeline.R: template starts rxp_r_file() load data, rxp_r() define step. two derivations put list passed rxp_populate(). Let’s start importing data filtering using dplyr: Select pipeline run (highly recommend use keyboard shortcuts quickly run code working interactively). everything went well, see following R console: Let’s inspect pipeline outputs using rxp_inspect(): Three things built: mtcars, simply source data set; filtered_mtcars, filtered data; object didn’t define called -derivations. last object mostly internal rixpress use, can safely ignore . Let’s now use rxp_read() take look filtered_mtcars: can save object like : can simply use rxp_load(\"filtered_mtcars\") achieve result. can now manipulate object interactively, usual. might still quite know next step (maybe missing values need handle somehow, another cleaning step), know next steps, can write next derivation: Rebuild pipeline. first two steps skipped ’re already available Nix store. can now start inspect -> try stuff -> define derivation -> build pipeline loop next derivation. now know basics using rixpress build simple pipeline. next vignette vignette(\"polyglot\") explains build pipeline R Python derivations, well compiling Quarto document. don’t need work multiple languages, can continue vignette vignette(\"debugging\").","code":"nix-shell --expr \"$(curl -sl https://raw.githubusercontent.com/ropensci/rix/main/inst/extdata/default.nix)\" library(rixpress)  rxp_init() # This script defines the default environment the pipeline runs in. # Add the required packages to execute the code necessary for each derivation. # If you want to create visual representations of the pipeline, consider adding # `{visNetwork}` and `{ggdag}` to the list of R packages. library(rix)  # Define execution environment rix(   date = NULL,   r_pkgs = NULL,   py_conf = NULL,   git_pkgs = list(     \"package_name\" = \"rixpress\",     \"repo_url\" = \"https://github.com/b-rodrigues/rixpress\",     \"commit\" = \"HEAD\"   ),   ide = \"none\",   project_path = \".\" ) library(rix)  # Define execution environment rix(   date = \"2025-04-11\",   r_pkgs = c(\"dplyr\", \"igraph\"),   git_pkgs = list(     package_name = \"rixpress\",     repo_url = \"https://github.com/b-rodrigues/rixpress\",     commit = \"HEAD\"   ),   ide = \"rstudio\",   project_path = \".\",   overwrite = TRUE ) library(rixpress) library(igraph)  list(   rxp_r_file(     name = NULL,     path = NULL,     read_function = \\(x) read.csv(file = x, sep = \",\")   ),   rxp_r(     name = NULL,     expr = NULL   ) ) |> rxp_populate(build = TRUE) library(rixpress) library(igraph)  list(   rxp_r_file(     name = mtcars,     path = 'data/mtcars.csv',     read_function = \\(x) (read.csv(file = x, sep = \"|\"))   ),    rxp_r(     name = filtered_mtcars,     expr = filter(mtcars, am == 1)   ) ) |> rxp_populate(build = TRUE) Build process started...  + > mtcars building + > filtered_mtcars building ✓ filtered_mtcars built ✓ mtcars built ✓ pipeline completed [2 completed, 0 errored] Build successful! Run `rxp_inspect()` for a summary. Read individual derivations using `rxp_read()` or load them into the global environment using `rxp_load()`. derivation build_success 1 all-derivations          TRUE 2 filtered_mtcars          TRUE 3          mtcars          TRUE                                                          path       output 1 /nix/store/xc67xyqw8ziggwdk7hhiqsgh7hxfv4k1-all-derivations filtered.... 2 /nix/store/njv7zpgiq9p843dixkcg1dpryr5rn6h4-filtered_mtcars filtered.... 3          /nix/store/gqf4l5jpbjdv1by0vw6vphhlrfa0600a-mtcars       mtcars   error_message 1          <NA> 2          <NA> 3          <NA> rxp_read(\"filtered_mtcars\") mpg cyl  disp  hp drat    wt  qsec vs am gear carb Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 Maserati Bora  15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 filtered_mtcars <- rxp_read(\"filtered_mtcars\") library(rixpress) library(igraph)  list(   rxp_r_file(     name = mtcars,     path = 'data/mtcars.csv',     read_function = \\(x) (read.csv(file = x, sep = \"|\"))   ),    rxp_r(     name = filtered_mtcars,     expr = filter(mtcars, am == 1)   ),    rxp_r(     name = mtcars_mpg,     expr = select(filtered_mtcars, mpg)   ) ) |>   rxp_populate(build = TRUE)"},{"path":"https://b-rodrigues.github.io/rixpress/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bruno Rodrigues. Author, maintainer.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rodrigues B (2025). rixpress: Build Reproducible Analytical Pipelines Nix. R package version 0.2.0, https://github.com/b-rodrigues/rixpress/.","code":"@Manual{,   title = {rixpress: Build Reproducible Analytical Pipelines With Nix},   author = {Bruno Rodrigues},   year = {2025},   note = {R package version 0.2.0},   url = {https://github.com/b-rodrigues/rixpress/}, }"},{"path":"https://b-rodrigues.github.io/rixpress/index.html","id":"rixpress-reproducible-analytical-pipelines-with-nix","dir":"","previous_headings":"","what":"Build Reproducible Analytical Pipelines With Nix","title":"Build Reproducible Analytical Pipelines With Nix","text":"want watch 2-Minute video introduction, click image :  rixpress provides framework building multilanguage reproducible analytical pipelines leveraging Nix’s build automation capabilities. One design goals rixpress mimic user experience targets package, heavily inspired workflow. builds rix package, provides helper functions define reproducible development environments code using Nix, ensuring pipeline runs fully reproducible Nix-managed environment. rixpress requires users write pipeline using familiar R code. rixpress focuses “micropipelines”: pipelines executed single machine small--medium sized projects. example, R script defines list derivations defined functions prefixed rxp_*(), passed rxp_populate(): Running rxp_populate() generates pipeline.nix file, contains build instructions derivations final outputs expressed Nix code. can define derivations run Python Julia code, objects can exchanged R Python using rxp_py2r() rxp_r2py(), serializing common format JSON. default, calling rxp_populate() also builds pipeline, ’s possible generate pipeline.nix file build pipeline later using: build process assumes presence default.nix file defines computational environment pipeline runs ; file can generated {rix} package. default.nix typically defines environment R required R packages (optionally Python/Julia packages), Quarto, necessary system-level dependencies pinned specific date ensure reproducibility. example , first derivation reads mtcars.csv (example ’s pipe-separated, .e. .psv file). output (example, mtcars, mtcars_am, mtcars_head, mtcars_tail, mtcars_mpg, page) built Nix within environment defined default.nix. Concretely, {rix} makes using Nix package manager easier R users, {rixpress} makes easy use Nix build automation tool. run rxp_populate(), folder called _rixpress/ created contains JSON representation pipeline’s DAG (Directed Acyclic Graph). can visualize pipeline using rxp_ggdag(): DAG pipeline built using Nix, outputs stored Nix store /nix/store/. make working outputs easier, rixpress provides several helper functions: rxp_read(\"mtcars_mpg\") — read content mtcars_mpg R (return value depends derivation type: R object, file path, etc.); rxp_load(\"mtcars_mpg\") — load objects result global environment; rxp_copy(\"page\") — copy outputs (e.g. generated document) Nix store current working directory can open inspect . complex outputs documents (example Quarto document page ), rxp_read(\"page\") returns output file path; can open browseURL() copy working directory rxp_copy(). can export cache file import another machine (CI) avoid rebuilding everything scratch using rxp_export_artifacts() rxp_import_artifacts() respectively. rxp_populate() flexible; please consult examples repository many different patterns complete demos: https://github.com/b-rodrigues/rixpress_demos/tree/master","code":"library(rixpress)  list(   rxp_r_file(     mtcars,     'mtcars.csv',     \\(x) (read.csv(file = x, sep = \"|\"))   ),    rxp_r(     mtcars_am,     filter(mtcars, am == 1)   ),    rxp_r(     mtcars_head,     head(mtcars_am)   ),    rxp_r(     mtcars_tail,     tail(mtcars_head)   ),    rxp_r(     mtcars_mpg,     select(mtcars_tail, mpg)   ),    rxp_qmd(     page,     \"page.qmd\"   ) ) |>   rxp_populate() rxp_make() rxp_ggdag()"},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/index.html","id":"rix","dir":"","previous_headings":"Installation","what":"rix","title":"Build Reproducible Analytical Pipelines With Nix","text":"rixpress builds rix, highly recommend start learning using rix trying hand rixpress. learning use rix, ’ll learn Nix, install use , ready use rixpress! install Nix, recommend using installer Determinate Systems.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/index.html","id":"installing-rixpress","dir":"","previous_headings":"Installation","what":"Installing rixpress","title":"Build Reproducible Analytical Pipelines With Nix","text":"Since ’s little point installing rixpress don’t use Nix, ideal way install rixpress instead use rix set reproducible environment includes rixpress required dependencies project. Take look introductory concepts vignette basic usage vignette get started! said, rixpress regular R package, can install GitHub directly (’s CRAN):","code":"# Install remotes if you don’t have it if (!require(\"remotes\")) install.packages(\"remotes\")  # Install the package from GitHub remotes::install_github(\"b-rodrigues/rixpress\")"},{"path":"https://b-rodrigues.github.io/rixpress/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Build Reproducible Analytical Pipelines With Nix","text":"Pull requests welcome. ’re unsure whether open one, feel free open issue first discuss idea. contributor guidelines, see CONTRIBUTING.md. plan contribute documentation vignettes, please: Add runnable, minimal examples. Prefer small datasets short-running examples. Document required system dependencies example (default.nix).","code":""},{"path":"https://b-rodrigues.github.io/rixpress/index.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Build Reproducible Analytical Pipelines With Nix","text":"Please refer vignette titled “Scope Roadmap” learn rixpress support.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/add_import.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an import statement to Python files in the _rixpress folder matching a Nix environment name — add_import","title":"Add an import statement to Python files in the _rixpress folder matching a Nix environment name — add_import","text":"function appends specified import statement end Python file within _rixpress folder subdirectories, files whose base name matches provided Nix environment.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/add_import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an import statement to Python files in the _rixpress folder matching a Nix environment name — add_import","text":"","code":"add_import(import_statement, nix_env, project_path = \".\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/add_import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an import statement to Python files in the _rixpress folder matching a Nix environment name — add_import","text":"import_statement character string representing import statement added. example, \"import numpy np\". nix_env character string naming Nix environment file (e.g. \"default.nix\" \"py-env.nix\" similar). project_path Path root project, typically \".\".","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/add_import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an import statement to Python files in the _rixpress folder matching a Nix environment name — add_import","text":"return value; function performs -place modifications files.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/add_import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an import statement to Python files in the _rixpress folder matching a Nix environment name — add_import","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming project is in current working directory add_import(\"import numpy as np\", \"default.nix\") # If project is elsewhere: # add_import(\"import numpy as np\", \"default.nix\", project_path = \"path/to/project\") } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/adjust_import.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Python import statements — adjust_import","title":"Adjust Python import statements — adjust_import","text":"calling rxp_populate(), file containing Python import statements automatically generated inside _rixpress folder. example, numpy package needed, file include line like \"import numpy\". However, Python programmers often write \"import numpy np\" instead.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/adjust_import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust Python import statements — adjust_import","text":"","code":"adjust_import(old_import, new_import, project_path = \".\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/adjust_import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust Python import statements — adjust_import","text":"old_import character string representing import statement replaced. example, \"import pillow\". new_import character string representing new import statement replace . example, \"PIL import Image\". project_path Path root project, typically \".\".","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/adjust_import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust Python import statements — adjust_import","text":"return value; function performs -place modifications files.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/adjust_import.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust Python import statements — adjust_import","text":"cases, correct import statement entirely different. example, pillow package, generated file contain \"import pillow\", incorrect—Python code import PIL namespace instead, e.g., \"PIL import Image\". adjustments automated reliably, adjust_import() function allows search replace import statements programmatically. reads file _rixpress folder, performs replacement, writes modified content back file.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/adjust_import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust Python import statements — adjust_import","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming your project is in the current working directory adjust_import(\"import pillow\", \"from PIL import Image\") # If project is elsewhere: # adjust_import(\"import pillow\", \"from PIL import Image\", project_path = \"path/to/project\") } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_env_exports.html","id":null,"dir":"Reference","previous_headings":"","what":"Build environment variable export commands — build_env_exports","title":"Build environment variable export commands — build_env_exports","text":"Generates shell export commands setting environment variables running build script.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_env_exports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build environment variable export commands — build_env_exports","text":"","code":"build_env_exports(env_var)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_env_exports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build environment variable export commands — build_env_exports","text":"env_var Named list environment variables.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_env_exports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build environment variable export commands — build_env_exports","text":"string export commands line breaks, \"\" none.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_hybrid_src.html","id":null,"dir":"Reference","previous_headings":"","what":"Build hybrid source configuration for remote URL + local user functions — build_hybrid_src","title":"Build hybrid source configuration for remote URL + local user functions — build_hybrid_src","text":"Build hybrid source configuration remote URL + local user functions","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_hybrid_src.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build hybrid source configuration for remote URL + local user functions — build_hybrid_src","text":"","code":"build_hybrid_src(url, user_functions)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_hybrid_src.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build hybrid source configuration for remote URL + local user functions — build_hybrid_src","text":"url Character URL user_functions Character vector additional files","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_hybrid_src.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build hybrid source configuration for remote URL + local user functions — build_hybrid_src","text":"Character Nix expression","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_language_commands.html","id":null,"dir":"Reference","previous_headings":"","what":"Build language-specific execution commands — build_language_commands","title":"Build language-specific execution commands — build_language_commands","text":"Build language-specific execution commands","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_language_commands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build language-specific execution commands — build_language_commands","text":"","code":"build_language_commands(lang, read_func, user_code, out_name, rel_path)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_language_commands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build language-specific execution commands — build_language_commands","text":"lang Language string read_func String representing function call user_code Source/import statements user functions out_name Name output object rel_path Relative path input file","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_language_commands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build language-specific execution commands — build_language_commands","text":"Character vector commands","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_local_src.html","id":null,"dir":"Reference","previous_headings":"","what":"Build local source configuration — build_local_src","title":"Build local source configuration — build_local_src","text":"Build local source configuration","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_local_src.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build local source configuration — build_local_src","text":"","code":"build_local_src(path, user_functions)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_local_src.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build local source configuration — build_local_src","text":"path Character path user_functions Character vector additional files","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_local_src.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build local source configuration — build_local_src","text":"Character Nix expression","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_phase.html","id":null,"dir":"Reference","previous_headings":"","what":"Build build_phase command — build_phase","title":"Build build_phase command — build_phase","text":"Constructs build-phase shell command R, Python, Julia.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_phase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build build_phase command — build_phase","text":"","code":"build_phase(   lang,   read_func,   user_code,   out_name,   path,   user_functions = character(0) )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_phase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build build_phase command — build_phase","text":"lang \"R\", \"Py\", \"Jl\". read_func String representing function call reading data. user_code Source/import statements user functions. out_name Name output object (RDS/pickle file). path Input path (file folder). user_functions Character vector user function files.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_phase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build build_phase command — build_phase","text":"string build phase commands.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_remote_src.html","id":null,"dir":"Reference","previous_headings":"","what":"Build remote source configuration — build_remote_src","title":"Build remote source configuration — build_remote_src","text":"Build remote source configuration","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_remote_src.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build remote source configuration — build_remote_src","text":"","code":"build_remote_src(url)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_remote_src.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build remote source configuration — build_remote_src","text":"url Character URL","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_remote_src.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build remote source configuration — build_remote_src","text":"Character Nix expression","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_reticulate_phase.html","id":null,"dir":"Reference","previous_headings":"","what":"Build reticulate build phase — build_reticulate_phase","title":"Build reticulate build phase — build_reticulate_phase","text":"Build reticulate build phase","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_reticulate_phase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build reticulate build phase — build_reticulate_phase","text":"","code":"build_reticulate_phase(r_command)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_reticulate_phase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build reticulate build phase — build_reticulate_phase","text":"r_command Character R command","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_reticulate_phase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build reticulate build phase — build_reticulate_phase","text":"Character build phase","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_src_part.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Nix src part — build_src_part","title":"Build Nix src part — build_src_part","text":"Creates src attribute Nix derivation. Handles remote URLs (using nix-prefetch-url) local paths (optional user function scripts).","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_src_part.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Nix src part — build_src_part","text":"","code":"build_src_part(path, user_functions = character(0))"},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_src_part.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Nix src part — build_src_part","text":"path Character path file directory. user_functions Character vector additional files include.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_src_part.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Nix src part — build_src_part","text":"string src Nix expression.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_transfer_command.html","id":null,"dir":"Reference","previous_headings":"","what":"Build transfer command for py2r or r2py — build_transfer_command","title":"Build transfer command for py2r or r2py — build_transfer_command","text":"Build transfer command py2r r2py","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_transfer_command.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build transfer command for py2r or r2py — build_transfer_command","text":"","code":"build_transfer_command(out_name, expr_str, direction)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_transfer_command.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build transfer command for py2r or r2py — build_transfer_command","text":"out_name Character output name expr_str Character expression string direction Character direction","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_transfer_command.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build transfer command for py2r or r2py — build_transfer_command","text":"Character command","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_user_code_cmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Build code import/source commands for user functions — build_user_code_cmd","title":"Build code import/source commands for user functions — build_user_code_cmd","text":"Creates language-specific commands load user-defined function scripts.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_user_code_cmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build code import/source commands for user functions — build_user_code_cmd","text":"","code":"build_user_code_cmd(user_functions, lang)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_user_code_cmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build code import/source commands for user functions — build_user_code_cmd","text":"user_functions Character vector script file names. lang Language string, \"R\", \"Py\", \"Jl\".","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/build_user_code_cmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build code import/source commands for user functions — build_user_code_cmd","text":"string import/source statements.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/clean_user_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean user functions vector — clean_user_functions","title":"Clean user functions vector — clean_user_functions","text":"Removes empty character entries provided user_functions vector.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/clean_user_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean user functions vector — clean_user_functions","text":"","code":"clean_user_functions(user_functions)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/clean_user_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean user functions vector — clean_user_functions","text":"user_functions Character vector user-defined function script paths.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/clean_user_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean user functions vector — clean_user_functions","text":"Character vector without empty strings.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/create_rxp_derivation.html","id":null,"dir":"Reference","previous_headings":"","what":"Create rxp_derivation object — create_rxp_derivation","title":"Create rxp_derivation object — create_rxp_derivation","text":"Create rxp_derivation object","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/create_rxp_derivation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create rxp_derivation object — create_rxp_derivation","text":"","code":"create_rxp_derivation(   out_name,   snippet,   lang,   user_functions,   nix_env,   env_var )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/create_rxp_derivation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create rxp_derivation object — create_rxp_derivation","text":"out_name Character output name snippet Character Nix snippet lang Character language user_functions Character vector nix_env Character nix environment env_var Named list environment variables","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/create_rxp_derivation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create rxp_derivation object — create_rxp_derivation","text":"rxp_derivation object","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract dependencies for a derivation — extract_dependencies","title":"Extract dependencies for a derivation — extract_dependencies","text":"Extract dependencies derivation","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract dependencies for a derivation — extract_dependencies","text":"","code":"extract_dependencies(deriv, type, name, all_derivs_names)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract dependencies for a derivation — extract_dependencies","text":"deriv derivation object type type derivation name name derivation all_derivs_names derivation names","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract dependencies for a derivation — extract_dependencies","text":"character vector dependency names","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_julia_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract dependencies from Julia script derivations — extract_julia_dependencies","title":"Extract dependencies from Julia script derivations — extract_julia_dependencies","text":"Extract dependencies Julia script derivations","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_julia_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract dependencies from Julia script derivations — extract_julia_dependencies","text":"","code":"extract_julia_dependencies(deriv, name, all_derivs_names)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_julia_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract dependencies from Julia script derivations — extract_julia_dependencies","text":"deriv derivation object name name derivation all_derivs_names derivation names","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_julia_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract dependencies from Julia script derivations — extract_julia_dependencies","text":"character vector dependency names","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_markdown_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract dependencies from markdown (Quarto/RMarkdown) derivations — extract_markdown_dependencies","title":"Extract dependencies from markdown (Quarto/RMarkdown) derivations — extract_markdown_dependencies","text":"Extract dependencies markdown (Quarto/RMarkdown) derivations","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_markdown_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract dependencies from markdown (Quarto/RMarkdown) derivations — extract_markdown_dependencies","text":"","code":"extract_markdown_dependencies(deriv, type, name, all_derivs_names)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_markdown_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract dependencies from markdown (Quarto/RMarkdown) derivations — extract_markdown_dependencies","text":"deriv derivation object type type derivation (\"rxp_qmd\" \"rxp_rmd\") name name derivation all_derivs_names derivation names","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_markdown_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract dependencies from markdown (Quarto/RMarkdown) derivations — extract_markdown_dependencies","text":"character vector dependency names","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_python_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract dependencies from Python script derivations — extract_python_dependencies","title":"Extract dependencies from Python script derivations — extract_python_dependencies","text":"Extract dependencies Python script derivations","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_python_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract dependencies from Python script derivations — extract_python_dependencies","text":"","code":"extract_python_dependencies(deriv, name, all_derivs_names)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_python_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract dependencies from Python script derivations — extract_python_dependencies","text":"deriv derivation object name name derivation all_derivs_names derivation names","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_python_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract dependencies from Python script derivations — extract_python_dependencies","text":"character vector dependency names","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_r_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract dependencies from R script derivations — extract_r_dependencies","title":"Extract dependencies from R script derivations — extract_r_dependencies","text":"Extract dependencies R script derivations","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_r_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract dependencies from R script derivations — extract_r_dependencies","text":"","code":"extract_r_dependencies(deriv, name, all_derivs_names)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_r_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract dependencies from R script derivations — extract_r_dependencies","text":"deriv derivation object name name derivation all_derivs_names derivation names","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/extract_r_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract dependencies from R script derivations — extract_r_dependencies","text":"character vector dependency names","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/is_remote_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if path is a remote URL — is_remote_url","title":"Check if path is a remote URL — is_remote_url","text":"Check path remote URL","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/is_remote_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if path is a remote URL — is_remote_url","text":"","code":"is_remote_url(path)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/is_remote_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if path is a remote URL — is_remote_url","text":"path Character path","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/is_remote_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if path is a remote URL — is_remote_url","text":"Logical","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/make_derivation_snippet.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to generate a Nix derivation snippet — make_derivation_snippet","title":"Helper function to generate a Nix derivation snippet — make_derivation_snippet","text":"Helper function generate Nix derivation snippet","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/make_derivation_snippet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to generate a Nix derivation snippet — make_derivation_snippet","text":"","code":"make_derivation_snippet(   out_name,   src_snippet,   base,   build_phase,   derivation_type,   noop_build = FALSE )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/make_derivation_snippet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to generate a Nix derivation snippet — make_derivation_snippet","text":"out_name Character, name derivation src_snippet Character, src part derivation base Character, base name buildInputs configurePhase build_phase Character, build phase commands derivation_type Character, one \"rxp_r\", \"rxp_py\", \"rxp_jl\", \"rxp_qmd\", \"rxp_rmd\" noop_build Logical, defaults FALSE. TRUE, derivation produces -op build (stub output actual build steps). downstream derivations depending -op build also become -op builds.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/make_derivation_snippet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to generate a Nix derivation snippet — make_derivation_snippet","text":"Character string formatted Nix derivation","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/print.rxp_derivation.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for derivation objects — print.rxp_derivation","title":"Print method for derivation objects — print.rxp_derivation","text":"Print method derivation objects","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/print.rxp_derivation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for derivation objects — print.rxp_derivation","text":"","code":"# S3 method for class 'rxp_derivation' print(x, ...)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/print.rxp_derivation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for derivation objects — print.rxp_derivation","text":"x object class \"rxp_derivation\" ... Additional arguments passed print methods","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/print.rxp_derivation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for derivation objects — print.rxp_derivation","text":"Nothing, prints summary derivation object console.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/print.rxp_derivation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for derivation objects — print.rxp_derivation","text":"","code":"if (FALSE) { # \\dontrun{ # d0 is a previously defined derivation   print(d0) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/process_read_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Process read function for different languages — process_read_function","title":"Process read function for different languages — process_read_function","text":"Process read function different languages","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/process_read_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process read function for different languages — process_read_function","text":"","code":"process_read_function(read_function, lang, parent_env = parent.frame())"},{"path":"https://b-rodrigues.github.io/rixpress/reference/process_read_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process read function for different languages — process_read_function","text":"read_function Function character lang Language string parent_env Environment calling function proper substitution","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/process_read_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process read function for different languages — process_read_function","text":"Character string","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/propagate_noop_builds.html","id":null,"dir":"Reference","previous_headings":"","what":"Propagate no-op builds to dependent derivations — propagate_noop_builds","title":"Propagate no-op builds to dependent derivations — propagate_noop_builds","text":"Propagate -op builds dependent derivations","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/propagate_noop_builds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Propagate no-op builds to dependent derivations — propagate_noop_builds","text":"","code":"propagate_noop_builds(dag)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/propagate_noop_builds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Propagate no-op builds to dependent derivations — propagate_noop_builds","text":"dag list derivation nodes dependencies","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/propagate_noop_builds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Propagate no-op builds to dependent derivations — propagate_noop_builds","text":"Updated DAG propagated -op flags","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_common_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the Nix derivation snippet for Python-R object transfer. — rxp_common_setup","title":"Generate the Nix derivation snippet for Python-R object transfer. — rxp_common_setup","text":"function constructs build_phase Nix derivation snippet based given parameters.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_common_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the Nix derivation snippet for Python-R object transfer. — rxp_common_setup","text":"","code":"rxp_common_setup(out_name, expr_str, nix_env, direction)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_common_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the Nix derivation snippet for Python-R object transfer. — rxp_common_setup","text":"out_name Character, name derivation. expr_str Character, name object transferred. nix_env Character, path Nix environment file. direction Character, either \"py2r\" (Python R) \"r2py\" (R Python).","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_common_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the Nix derivation snippet for Python-R object transfer. — rxp_common_setup","text":"list elements: name, snippet, type, additional_files, nix_env.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_copy.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy derivations from the Nix store to current working directory — rxp_copy","title":"Copy derivations from the Nix store to current working directory — rxp_copy","text":"Nix builds derivation, output saved Nix store located /nix/store/. Even though can import derivations current R session using rxp_read() rxp_load(), can useful copy outputs current working directory. especially useful Quarto documents, can one input, case html output.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_copy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy derivations from the Nix store to current working directory — rxp_copy","text":"","code":"rxp_copy(derivation_name = NULL, dir_mode = \"0755\", file_mode = \"0644\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_copy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy derivations from the Nix store to current working directory — rxp_copy","text":"derivation_name name derivation copy. empty, derivations copied. dir_mode Character, default \"0755\". POSIX permission mode apply directories copied output (including top-level output directory). file_mode Character, default \"0644\". POSIX permission mode apply files copied output.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_copy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy derivations from the Nix store to current working directory — rxp_copy","text":"Nothing, contents Nix store copied current working directory.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_copy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy derivations from the Nix store to current working directory — rxp_copy","text":"","code":"if (FALSE) { # \\dontrun{   # Copy all derivations to the current working directory   rxp_copy()    # Copy a specific derivation   rxp_copy(\"mtcars\")    # Copy with custom permissions (e.g., make scripts executable)   rxp_copy(\"my_deriv\", dir_mode = \"0755\", file_mode = \"0644\")    # Copy a Quarto document output with multiple files   rxp_copy(\"my_quarto_doc\") } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_dag_for_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Export DAG of pipeline and prepare it for rendering on CI — rxp_dag_for_ci","title":"Export DAG of pipeline and prepare it for rendering on CI — rxp_dag_for_ci","text":"function generates DOT file representation pipeline DAG, suitable visualization, potentially CI platforms. called rxp_ga().","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_dag_for_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export DAG of pipeline and prepare it for rendering on CI — rxp_dag_for_ci","text":"","code":"rxp_dag_for_ci(   nodes_and_edges = get_nodes_edges(),   output_file = \"_rixpress/dag.dot\" )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_dag_for_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export DAG of pipeline and prepare it for rendering on CI — rxp_dag_for_ci","text":"nodes_and_edges List, output get_nodes_edges(). Defaults calling get_nodes_edges(). output_file Character, path DOT file saved. Defaults \"_rixpress/dag.dot\". directory created exist.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_dag_for_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export DAG of pipeline and prepare it for rendering on CI — rxp_dag_for_ci","text":"Nothing, writes DOT file specified output_file.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_dag_for_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export DAG of pipeline and prepare it for rendering on CI — rxp_dag_for_ci","text":"","code":"if (FALSE) { # \\dontrun{   # Generate the default _rixpress/dag.dot   rxp_dag_for_ci()  } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_export_artifacts.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Nix store paths to an archive — rxp_export_artifacts","title":"Export Nix store paths to an archive — rxp_export_artifacts","text":"Creates single archive file containing specified Nix store paths dependencies. archive can transferred another machine imported Nix store.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_export_artifacts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Nix store paths to an archive — rxp_export_artifacts","text":"","code":"rxp_export_artifacts(   archive_file = \"_rixpress/pipeline_outputs.nar\",   which_log = NULL,   project_path = \".\" )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_export_artifacts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Nix store paths to an archive — rxp_export_artifacts","text":"archive_file Character, path archive, defaults \"_rixpress/pipeline-outputs.nar\" which_log Character NULL, regex pattern match specific log file. NULL (default), recent log file used. project_path Character, defaults \".\". Path root directory project.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_export_artifacts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Nix store paths to an archive — rxp_export_artifacts","text":"Nothing, creates archive file specified location.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_export_artifacts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export Nix store paths to an archive — rxp_export_artifacts","text":"","code":"if (FALSE) { # \\dontrun{   # Export the most recent build to the default location   rxp_export_artifacts()    # Export a specific build to a custom location   rxp_export_artifacts(     archive_file = \"my_archive.nar\",     which_log = \"20250510\"   ) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Nix expression builder for R, Python, and Julia data readers — rxp_file","title":"Generic Nix expression builder for R, Python, and Julia data readers — rxp_file","text":"Creates Nix derivation reads file folder data using R, Python, Julia. Handles user-defined functions, environment variables, Nix environment specification.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Nix expression builder for R, Python, and Julia data readers — rxp_file","text":"","code":"rxp_file(   lang,   name,   path,   read_function,   user_functions = \"\",   nix_env = \"default.nix\",   env_var = NULL )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Nix expression builder for R, Python, and Julia data readers — rxp_file","text":"lang \"R\", \"Py\" \"Jl\". name Symbol, name derivation. path Character, file path include (e.g., \"data/mtcars.shp\") folder path (e.g., \"data\"). See details. read_function Function, R function read data, taking one argument (path). can user-defined function made available using user_functions. user_functions Character vector, user-defined functions include. script (scripts) containing user-defined functions include build process derivation. recommended use one script per function, include required script(s) derivation. nix_env Character, path Nix environment file, default \"default.nix\". env_var List, defaults NULL. named list environment variables set running R script, e.g., c(VAR = \"hello\"). entry added export statement build phase.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Nix expression builder for R, Python, and Julia data readers — rxp_file","text":"object class rxp_derivation.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ga.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a pipeline on GitHub Actions — rxp_ga","title":"Run a pipeline on GitHub Actions — rxp_ga","text":"Run pipeline GitHub Actions","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a pipeline on GitHub Actions — rxp_ga","text":"","code":"rxp_ga()"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a pipeline on GitHub Actions — rxp_ga","text":"Nothing, copies file directory.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ga.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run a pipeline on GitHub Actions — rxp_ga","text":"function puts .yaml file inside .github/workflows/ folder root project. workflow file expects scripts generated rxp_init(), gen-env.R gen-pipeline.R present. case, edit .yaml file accordingly. Build artifacts archived restored automatically runs. Make sure give read write permissions GitHub Actions bot.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a pipeline on GitHub Actions — rxp_ga","text":"","code":"if (FALSE) { # \\dontrun{   rxp_ga() } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_gc.html","id":null,"dir":"Reference","previous_headings":"","what":"Garbage Collect Rixpress Build Artifacts and Logs — rxp_gc","title":"Garbage Collect Rixpress Build Artifacts and Logs — rxp_gc","text":"function performs garbage collection Nix store paths build log files generated rixpress. can operate two modes: full garbage collection (keep_since = NULL) targeted deletion based log file age.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_gc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Garbage Collect Rixpress Build Artifacts and Logs — rxp_gc","text":"","code":"rxp_gc(   keep_since = NULL,   project_path = \".\",   dry_run = FALSE,   timeout_sec = 300,   verbose = FALSE )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_gc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Garbage Collect Rixpress Build Artifacts and Logs — rxp_gc","text":"keep_since Date character string (YYYY-MM-DD format). provided, build logs older date targeted deletion, along associated Nix store paths. NULL, performs full Nix garbage collection. Default NULL. project_path Character string specifying path project directory containing _rixpress folder build logs. Default \".\" (current directory). dry_run Logical. TRUE, shows deleted without actually performing deletions. Useful previewing cleanup operation. Default TRUE. timeout_sec Numeric. Timeout seconds individual Nix commands. Also used concurrency lock expiration. Default 300 seconds. verbose Logical. TRUE, provides detailed output including full paths, command outputs, diagnostic information references preventing deletion. Default FALSE.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_gc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Garbage Collect Rixpress Build Artifacts and Logs — rxp_gc","text":"Invisibly returns list cleanup summary information: kept: Vector build log filenames kept deleted: Vector build log filenames targeted deletion protected: Number store paths protected via GC roots (date-based mode) deleted_count: Number store paths successfully deleted failed_count: Number store paths failed delete referenced_count: Number store paths skipped due references log_files_deleted: Number build log files successfully deleted log_files_failed: Number build log files failed delete dry_run_details: List detailed information dry_run = TRUE","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_gc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Garbage Collect Rixpress Build Artifacts and Logs — rxp_gc","text":"function operates two modes: Full Garbage Collection Mode (keep_since = NULL): Runs nix-store --gc delete unreferenced store paths delete build log files Suitable complete cleanup unused Nix store paths Targeted Deletion Mode (keep_since specified): Identifies build logs older specified date Extracts store paths old logs using rxp_inspect() Protects recent store paths creating temporary GC roots Attempts delete old store paths individually using nix-store --delete Deletes corresponding build log .rds files _rixpress/ Handles referenced paths gracefully (paths deleted due dependencies) Concurrency Safety: function uses lock file mechanism prevent multiple instances running simultaneously, interfere 's GC root management. Reference Handling: store paths may deletable still referenced : User system profile generations Active Nix shell environments Result symlinks project directories store paths depend paths reported considered errors.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_gc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Garbage Collect Rixpress Build Artifacts and Logs — rxp_gc","text":"","code":"if (FALSE) { # \\dontrun{ # Preview what would be deleted (dry run) rxp_gc(keep_since = \"2025-08-01\", dry_run = TRUE, verbose = TRUE)  # Delete artifacts from builds older than August 1st, 2025 rxp_gc(keep_since = \"2025-08-01\")  # Full garbage collection of all unreferenced store paths rxp_gc()  # Clean up artifacts older than 30 days ago rxp_gc(keep_since = Sys.Date() - 30) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ggdag.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {ggplot2} — rxp_ggdag","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {ggplot2} — rxp_ggdag","text":"Uses {ggdag} generate plot. {ggdag} soft dependency {rixpress} need install use function.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ggdag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {ggplot2} — rxp_ggdag","text":"","code":"rxp_ggdag(nodes_and_edges = get_nodes_edges())"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ggdag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {ggplot2} — rxp_ggdag","text":"nodes_and_edges List, output get_nodes_edges().","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ggdag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {ggplot2} — rxp_ggdag","text":"{ggplot2} object.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_ggdag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {ggplot2} — rxp_ggdag","text":"","code":"if (FALSE) { # \\dontrun{   rxp_ggdag() } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_import_artifacts.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Nix store paths from an archive — rxp_import_artifacts","title":"Import Nix store paths from an archive — rxp_import_artifacts","text":"Imports store paths contained archive file local Nix store. Useful transferring built outputs machines.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_import_artifacts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Nix store paths from an archive — rxp_import_artifacts","text":"","code":"rxp_import_artifacts(archive_file = \"_rixpress/pipeline_outputs.nar\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_import_artifacts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Nix store paths from an archive — rxp_import_artifacts","text":"archive_file Character, path archive, defaults \"_rixpress/pipeline-outputs.nar\"","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_import_artifacts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Nix store paths from an archive — rxp_import_artifacts","text":"Nothing, imports archive contents local Nix store.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_import_artifacts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import Nix store paths from an archive — rxp_import_artifacts","text":"","code":"if (FALSE) { # \\dontrun{   # Import from the default archive location   rxp_import_artifacts()    # Import from a custom archive file   rxp_import_artifacts(\"path/to/my_archive.nar\") } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize rixpress project — rxp_init","title":"Initialize rixpress project — rxp_init","text":"Generates gen-env.R gen-pipeline.R scripts specified project directory, asking user confirmation. user declines, changes made.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize rixpress project — rxp_init","text":"","code":"rxp_init(project_path = \".\", skip_prompt = FALSE)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize rixpress project — rxp_init","text":"project_path Character string specifying project's path. skip_prompt Logical. TRUE, skips confirmation prompts proceeds initialization, useful continuous integration. Defaults FALSE.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize rixpress project — rxp_init","text":"Logical. Returns TRUE initialization successful, FALSE operation cancelled user.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_init.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize rixpress project — rxp_init","text":"Creates (overwriting already exist): gen-env.R: Script define execution environment {rix}. gen-pipeline.R: Defines data pipeline {rixpress}.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize rixpress project — rxp_init","text":"","code":"# Default usage (will prompt before any action) if (FALSE) { # \\dontrun{   rxp_init() } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_inspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect the build result of a pipeline. — rxp_inspect","title":"Inspect the build result of a pipeline. — rxp_inspect","text":"Returns data frame four columns: - derivation: name derivation - build_success: whether build successful - path: path derivation Nix store - output: output, derivation built successfully. Empty outputs mean derivation built successfully. Several outputs single derivation possible. derivation column find object called -derivations. object generated automatically internal purposes, can safely ignore .","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_inspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect the build result of a pipeline. — rxp_inspect","text":"","code":"rxp_inspect(project_path = \".\", which_log = NULL)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_inspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect the build result of a pipeline. — rxp_inspect","text":"project_path Character, defaults \".\". Path root directory project. which_log Character, defaults NULL. NULL recent build log used. string provided, used regular expression match available log files.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_inspect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect the build result of a pipeline. — rxp_inspect","text":"data frame derivation names, build successful, paths /nix/store, build outputs.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_inspect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect the build result of a pipeline. — rxp_inspect","text":"","code":"if (FALSE) { # \\dontrun{   # Inspect the most recent build   build_results <- rxp_inspect()    # Inspect a specific build log   build_results <- rxp_inspect(which_log = \"20250510\")    # Check which derivations failed   failed <- subset(build_results, !build_success) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_jl.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Nix expression running a Julia function — rxp_jl","title":"Create a Nix expression running a Julia function — rxp_jl","text":"Create Nix expression running Julia function","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_jl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Nix expression running a Julia function — rxp_jl","text":"","code":"rxp_jl(   name,   jl_expr,   additional_files = \"\",   user_functions = \"\",   nix_env = \"default.nix\",   serialize_function = NULL,   unserialize_function = NULL,   env_var = NULL,   noop_build = FALSE )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_jl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Nix expression running a Julia function — rxp_jl","text":"name Symbol, name derivation. jl_expr Character, Julia code generate expression. additional_files Character vector, additional files include build process. example, function expects certain file available, include . user_functions Character vector, user-defined functions include. script (scripts) containing user-defined functions include build process derivation. recommended use one script per function, include required script(s) derivation. nix_env Character, path Nix environment file, default \"default.nix\". serialize_function Character, defaults NULL. name Julia function used serialize object. must accept two arguments: object serialize (first), target file path (second). NULL, default behaviour uses built‐Serialization.serialize API. Define custom serializer functions.jl. unserialize_function Character named vector/list, defaults NULL. Can : single string Julia function unserialize upstream objects named vector/list names upstream dependency names values specific unserialize functions NULL, default Serialization.deserialize. env_var Character vector, defaults NULL. named vector environment variables set running Julia script, e.g., c(\"JULIA_DEPOT_PATH\" = \"/path//depot\"). entry added export statement build phase. noop_build Logical, defaults FALSE. TRUE, derivation produces -op build (stub output actual build steps). downstream derivations depending -op build also become -op builds.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_jl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Nix expression running a Julia function — rxp_jl","text":"object class derivation inherits lists.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_jl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Nix expression running a Julia function — rxp_jl","text":"basic level, rxp_jl(filtered_data, \"filter(df, :col .> 10)\") equivalent filtered_data = filter(df, :col .> 10) Julia. rxp_jl() generates required Nix boilerplate output ‐called \"derivation\" Nix jargon. Nix derivation recipe defines create output (case filtered_data) including dependencies, build steps, output paths.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_jl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Nix expression running a Julia function — rxp_jl","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage, no custom serializer rxp_jl(   name = filtered_df,   jl_expr = \"filter(df, :col .> 10)\" )  # Skip building this derivation rxp_jl(   name = model_result,   jl_expr = \"train_model(data)\",   noop_build = TRUE )  # Custom serialization: assume `save_my_obj(obj, path)` is defined in functions.jl rxp_jl(   name = model_output,   jl_expr = \"train_model(data)\",   serialize_function = \"save_my_obj\",   user_functions = \"functions.jl\" ) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_jl_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a Nix expression that reads in a file (or folder of data) using Julia. — rxp_jl_file","title":"Creates a Nix expression that reads in a file (or folder of data) using Julia. — rxp_jl_file","text":"Creates Nix expression reads file (folder data) using Julia.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_jl_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a Nix expression that reads in a file (or folder of data) using Julia. — rxp_jl_file","text":"","code":"rxp_jl_file(...)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_jl_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a Nix expression that reads in a file (or folder of data) using Julia. — rxp_jl_file","text":"... Arguments passed rxp_file name Symbol, name derivation. path Character, file path include (e.g., \"data/mtcars.shp\") folder path (e.g., \"data\"). See details. read_function Function, R function read data, taking one argument (path). can user-defined function made available using user_functions. user_functions Character vector, user-defined functions include. script (scripts) containing user-defined functions include build process derivation. recommended use one script per function, include required script(s) derivation. nix_env Character, path Nix environment file, default \"default.nix\". env_var List, defaults NULL. named list environment variables set running R script, e.g., c(VAR = \"hello\"). entry added export statement build phase.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_jl_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a Nix expression that reads in a file (or folder of data) using Julia. — rxp_jl_file","text":"object class rxp_derivation.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_jl_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a Nix expression that reads in a file (or folder of data) using Julia. — rxp_jl_file","text":"basic usage provide path file, function read . example: rxp_r_file(mtcars, path = \"data/mtcars.csv\", read_function = read.csv). also possible instead point folder contains many files read , example: rxp_r_file(many_csvs, path = \"data\", read_function = \\(x)(readr::read_csv(list.files(x, full.names = TRUE, pattern = \".csv$\")))) Python example uses user-defined function: rxp_py_file(mtcars_py, path = 'data', \"read_many_csvs\", user_functions = \"functions.py\").","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_list_logs.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available build logs — rxp_list_logs","title":"List all available build logs — rxp_list_logs","text":"Returns data frame information build logs project's _rixpress directory.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_list_logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available build logs — rxp_list_logs","text":"","code":"rxp_list_logs(project_path = \".\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_list_logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all available build logs — rxp_list_logs","text":"project_path Character, defaults \".\". Path root directory project.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_list_logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available build logs — rxp_list_logs","text":"data frame log filenames, modification times, file sizes.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_list_logs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all available build logs — rxp_list_logs","text":"","code":"if (FALSE) { # \\dontrun{   # List all build logs in the current project   logs <- rxp_list_logs()    # List logs from a specific project directory   logs <- rxp_list_logs(\"path/to/project\") } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_load.html","id":null,"dir":"Reference","previous_headings":"","what":"Load output of a derivation — rxp_load","title":"Load output of a derivation — rxp_load","text":"Loads output derivations parent frame current session, returns path reading directly possible.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load output of a derivation — rxp_load","text":"","code":"rxp_load(derivation_name, which_log = NULL, project_path = \".\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load output of a derivation — rxp_load","text":"derivation_name Character, name derivation. which_log Character, defaults NULL. NULL recent build log used. string provided, used regular expression match available log files. project_path Character, defaults \".\". Path root directory project.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_load.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load output of a derivation — rxp_load","text":"Nothing, function side effect loading objects parent frame.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_load.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load output of a derivation — rxp_load","text":"derivation_name points single R object, gets loaded current session using assign(..., envir = parent.frame()), corresponds global environment regular interactive session. trying load Python object {reticulate} available, reticulate::py_load_object() used object gets loaded global environment. case derivation pointing several outputs (can happen building Quarto document example) loading fails, path object returned instead.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_load.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load output of a derivation — rxp_load","text":"","code":"if (FALSE) { # \\dontrun{   # Load an R object   rxp_load(\"mtcars\")    # Load a Python object   rxp_load(\"my_python_model\")    # Load from a specific build log   rxp_load(\"mtcars\", which_log = \"2025-05-10\") } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_make.html","id":null,"dir":"Reference","previous_headings":"","what":"Build pipeline using Nix — rxp_make","title":"Build pipeline using Nix — rxp_make","text":"Runs nix-build quiet flag, outputting _rixpress/result.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_make.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build pipeline using Nix — rxp_make","text":"","code":"rxp_make(verbose = 0L, max_jobs = 1, cores = 1)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_make.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build pipeline using Nix — rxp_make","text":"verbose Integer, defaults 0L. Verbosity level: 0 = show progress indicators , 1+ = show nix output increasing verbosity. 0: \"Progress \", 1: \"Informational\", 2: \"Talkative\", 3: \"Chatty\", 4: \"Debug\", 5: \"Vomit\". Values higher 5 capped 5. level adds one –verbose flag nix-store command. max_jobs Integer, number derivations built parallel. cores Integer, number cores derivation can use build.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_make.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build pipeline using Nix — rxp_make","text":"character vector paths built outputs.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_make.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build pipeline using Nix — rxp_make","text":"","code":"if (FALSE) { # \\dontrun{   # Build the pipeline with progress indicators (default)   rxp_make()    # Build with verbose output and parallel execution   rxp_make(verbose = 2, max_jobs = 4, cores = 2)    # Maximum verbosity   rxp_make(verbose = 3) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_populate.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Nix Pipeline Code — rxp_populate","title":"Generate Nix Pipeline Code — rxp_populate","text":"function generates pipeline.nix file based list derivation objects. derivation defines build step, rxp_populate() chains steps handles serialization conversion Python objects R objects (vice-versa). Derivations created rxp_r(), rxp_py() . default, pipeline also immediately built generated, build process can postponed setting build FALSE. case, pipeline can built using rxp_make() later stage.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_populate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Nix Pipeline Code — rxp_populate","text":"","code":"rxp_populate(derivs, project_path = \".\", build = FALSE, py_imports = NULL, ...)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_populate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Nix Pipeline Code — rxp_populate","text":"derivs list derivation objects, object list five elements: - $name, character, name derivation - $snippet, character, nix code snippet build derivation - $type, character, can R, Python Quarto - $additional_files, character vector paths files make available build sandbox - $nix_env, character, path Nix environment build derivation single deriv output rxp_r(), rxp_qmd() rxp_py() function. project_path Path root project, defaults \".\". build Logical, defaults FALSE. pipeline get built right generated? FALSE, use rxp_make() build pipeline later stage. py_imports Named character vector Python import rewrites. Names base modules rixpress auto-imports \"import \", values desired import lines. example: c(numpy = \"import numpy np\", xgboost = \"xgboost import XGBClassifier\"). entry applied replacing \"import \" provided string across generated _rixpress Python library files. ... arguments passed methods. Use max-jobs cores set parallelism build. See documentation rxp_make() details.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_populate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Nix Pipeline Code — rxp_populate","text":"Nothing, writes file called pipeline.nix Nix code build pipeline.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_populate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Nix Pipeline Code — rxp_populate","text":"generated pipeline.nix expression includes: required imports environments, typically default.nix files generated rix package; correct handling interdependencies different derivations; serialization deserialization R Python objects, conversion objects passed one language another; correct loading R Python packages, extra functions needed build specific targets Inline Python import adjustments cases, due automatic handling Python packages, users might want change import statements. default , say, pandas needed build derivation, imported import pandas. However, Python programmers typically use import pandas pd. can either: use py_imports rewrite automatically population, use adjust_import() advanced/manual control.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_populate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Nix Pipeline Code — rxp_populate","text":"","code":"if (FALSE) { # \\dontrun{ # Create derivation objects d1 <- rxp_r(mtcars_am, filter(mtcars, am == 1)) d2 <- rxp_r(mtcars_head, head(mtcars_am)) list_derivs <- list(d1, d2)  # Generate and build in one go rxp_populate(derivs = list_derivs, project_path = \".\", build = TRUE)  # Or only populate, with inline Python import adjustments rxp_populate(   derivs = list_derivs,   project_path = \".\",   build = FALSE,   py_imports = c(pandas = \"import pandas as pd\") ) # Then later: rxp_make() } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Nix expression running a Python function — rxp_py","title":"Create a Nix expression running a Python function — rxp_py","text":"Create Nix expression running Python function","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Nix expression running a Python function — rxp_py","text":"","code":"rxp_py(   name,   py_expr,   additional_files = \"\",   user_functions = \"\",   nix_env = \"default.nix\",   serialize_function = NULL,   unserialize_function = NULL,   env_var = NULL,   noop_build = FALSE )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Nix expression running a Python function — rxp_py","text":"name Symbol, name derivation. py_expr Character, Python code generate expression. additional_files Character vector, additional files include build process. example, function expects certain file available, include . user_functions Character vector, user-defined functions include. script (scripts) containing user-defined functions include build process derivation. recommended use one script per function, include required script(s) derivation. nix_env Character, path Nix environment file, default \"default.nix\". serialize_function Character, defaults NULL. name Python function used serialize object. must accept two arguments: object serialize (first), target file path (second). NULL, default behaviour uses pickle.dump. Define function functions.py. unserialize_function Character named vector/list, defaults NULL. Can : single string Python function unserialize upstream objects named vector/list names upstream dependency names values specific unserialize functions NULL, default uses pickle.load. env_var Character vector, defaults NULL. named vector environment variables running Python script, e.g., c(PYTHONPATH = \"/path//modules\"). entry added export statement build phase. noop_build Logical, defaults FALSE. TRUE, derivation produces -op build (stub output actual build steps). downstream derivations depending -op build also become -op builds.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Nix expression running a Python function — rxp_py","text":"object class derivation inherits lists.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Nix expression running a Python function — rxp_py","text":"basic level, rxp_py(mtcars_am, \"mtcars.filter(polars.col('') == 1).to_pandas()\") equivalent mtcars_am = mtcars.filter(polars.col('') == 1).to_pandas(). rxp_py() generates required Nix boilerplate output -called \"derivation\" Nix jargon. Nix derivation recipe defines create output (case mtcars_am) including dependencies, build steps, output paths.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Nix expression running a Python function — rxp_py","text":"","code":"if (FALSE) { # \\dontrun{   rxp_py(     mtcars_pl_am,     py_expr = \"mtcars_pl.filter(polars.col('am') == 1).to_pandas()\"   )    # Skip building this derivation   rxp_py(     data_prep,     py_expr = \"preprocess_data(raw_data)\",     noop_build = TRUE   )    # Custom serialization   rxp_py(     mtcars_pl_am,     py_expr = \"mtcars_pl.filter(polars.col('am') == 1).to_pandas()\",     user_functions = \"functions.py\",     serialize_function = \"serialize_model\",     additional_files = \"some_required_file.bin\") } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py2r.html","id":null,"dir":"Reference","previous_headings":"","what":"Transfer Python object into an R session. — rxp_py2r","title":"Transfer Python object into an R session. — rxp_py2r","text":"Transfer Python object R session.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py2r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transfer Python object into an R session. — rxp_py2r","text":"","code":"rxp_py2r(name, expr, nix_env = \"default.nix\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py2r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transfer Python object into an R session. — rxp_py2r","text":"name Symbol, name derivation. expr Symbol, Python object loaded R. nix_env Character, path Nix environment file, default \"default.nix\".","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py2r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transfer Python object into an R session. — rxp_py2r","text":"object class rxp_derivation.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py2r.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transfer Python object into an R session. — rxp_py2r","text":"rxp_py2r(my_obj, my_python_object) loads serialized Python object saves RDS file using reticulate::py_load_object().","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a Nix expression that reads in a file (or folder of data) using Python. — rxp_py_file","title":"Creates a Nix expression that reads in a file (or folder of data) using Python. — rxp_py_file","text":"Creates Nix expression reads file (folder data) using Python.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a Nix expression that reads in a file (or folder of data) using Python. — rxp_py_file","text":"","code":"rxp_py_file(...)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a Nix expression that reads in a file (or folder of data) using Python. — rxp_py_file","text":"... Arguments passed rxp_file name Symbol, name derivation. path Character, file path include (e.g., \"data/mtcars.shp\") folder path (e.g., \"data\"). See details. read_function Function, R function read data, taking one argument (path). can user-defined function made available using user_functions. user_functions Character vector, user-defined functions include. script (scripts) containing user-defined functions include build process derivation. recommended use one script per function, include required script(s) derivation. nix_env Character, path Nix environment file, default \"default.nix\". env_var List, defaults NULL. named list environment variables set running R script, e.g., c(VAR = \"hello\"). entry added export statement build phase.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a Nix expression that reads in a file (or folder of data) using Python. — rxp_py_file","text":"object class rxp_derivation.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_py_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a Nix expression that reads in a file (or folder of data) using Python. — rxp_py_file","text":"basic usage provide path file, function read . example: rxp_r_file(mtcars, path = \"data/mtcars.csv\", read_function = read.csv). also possible instead point folder contains many files read , example: rxp_r_file(many_csvs, path = \"data\", read_function = \\(x)(readr::read_csv(list.files(x, full.names = TRUE, pattern = \".csv$\")))) Python example uses user-defined function: rxp_py_file(mtcars_py, path = 'data', \"read_many_csvs\", user_functions = \"functions.py\").","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_qmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a Quarto document as a Nix derivation — rxp_qmd","title":"Render a Quarto document as a Nix derivation — rxp_qmd","text":"Render Quarto document Nix derivation","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_qmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a Quarto document as a Nix derivation — rxp_qmd","text":"","code":"rxp_qmd(   name,   qmd_file,   additional_files = \"\",   nix_env = \"default.nix\",   args = \"\",   env_var = NULL,   noop_build = FALSE )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_qmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a Quarto document as a Nix derivation — rxp_qmd","text":"name Symbol, derivation name. qmd_file Character, path .qmd file. additional_files Character vector, additional files include, example folder containing images include Quarto document. nix_env Character, path Nix environment file, default \"default.nix\". args character additional arguments passed directly quarto command. env_var List, defaults NULL. named list environment variables set running Quarto render command, e.g., c(QUARTO_PROFILE = \"production\"). entry added export statement build phase. noop_build Logical, defaults FALSE. TRUE, derivation produces -op build (stub output actual build steps). downstream derivations depending -op build also become -op builds.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_qmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a Quarto document as a Nix derivation — rxp_qmd","text":"object class derivation inherits lists.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_qmd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Render a Quarto document as a Nix derivation — rxp_qmd","text":"include built derivations document, rxp_read(\"derivation_name\") put .qmd file.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_qmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render a Quarto document as a Nix derivation — rxp_qmd","text":"","code":"if (FALSE) { # \\dontrun{   # Compile a .qmd file to a pdf using typst   # `images` is a folder containing images to include in the Quarto doc   rxp_qmd(     name = report,     qmd_file = \"report.qmd\",     additional_files = \"images\",     args = \"--to typst\"   )    # Skip building this derivation   rxp_qmd(     name = draft_report,     qmd_file = \"draft.qmd\",     noop_build = TRUE   ) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Nix expression running an R function — rxp_r","title":"Create a Nix expression running an R function — rxp_r","text":"Create Nix expression running R function","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Nix expression running an R function — rxp_r","text":"","code":"rxp_r(   name,   expr,   additional_files = \"\",   user_functions = \"\",   nix_env = \"default.nix\",   serialize_function = NULL,   unserialize_function = NULL,   env_var = NULL,   noop_build = FALSE )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Nix expression running an R function — rxp_r","text":"name Symbol, name derivation. expr R code generate expression. additional_files Character vector, additional files include build process. example, function expects certain file available, include . user_functions Character vector, user-defined functions include. script (scripts) containing user-defined functions include build process derivation. recommended use one script per function, include required script(s) derivation. nix_env Character, path Nix environment file, default \"default.nix\". serialize_function Function, defaults NULL. function used serialize objects transfer derivations. must accept two arguments: object serialize (first), target file path (second). function different signature, wrap match interface. default, saveRDS() used, may yield unexpected results, especially complex objects like machine learning models. instance, {keras} models, use keras::save_model_hdf5() capture full model (architecture, weights, training config, optimiser state, etc.). unserialize_function Function, character, named vector/list, defaults NULL. Can : single function/string unserialize upstream objects (e.g., readRDS) named vector/list names upstream dependency names values specific unserialize functions (e.g., c(mtcars_tail = \"qs::qread\", mtcars_head = \"read.csv\")) default, readRDS() used. env_var Character vector, defaults NULL. named vector environment variables set running R script, e.g., c(\"CMDSTAN\" = \"${defaultPkgs.cmdstan}/opt/cmdstan)\". entry added export statement build phase. noop_build Logical, defaults FALSE. TRUE, derivation produces -op build (stub output actual build steps). downstream derivations depending -op build also become -op builds.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Nix expression running an R function — rxp_r","text":"object class derivation inherits lists.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Nix expression running an R function — rxp_r","text":"basic level, rxp_r(mtcars_am, filter(mtcars, == 1)) equivalent mtcars_am <- filter(mtcars, == 1). rxp_r() generates required Nix boilerplate output -called \"derivation\" Nix jargon. Nix derivation recipe defines create output (case mtcars_am) including dependencies, build steps, output paths.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Nix expression running an R function — rxp_r","text":"","code":"if (FALSE) { # \\dontrun{   # Basic usage   rxp_r(name = filtered_mtcars, expr = filter(mtcars, am == 1))    # Skip building this derivation   rxp_r(     name = turtles,     expr = occurrence(species, geometry = atlantic),     noop_build = TRUE   )    # Serialize object using qs   rxp_r(    name = filtered_mtcars,    expr = filter(mtcars, am == 1),    serialize_function = qs::qsave   )   # Unerialize using qs::qread in the next derivation   rxp_r(    name = mtcars_mpg,    expr = select(filtered_mtcars, mpg),    unserialize_function = qs::qread   ) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r2py.html","id":null,"dir":"Reference","previous_headings":"","what":"Transfer R object into a Python session. — rxp_r2py","title":"Transfer R object into a Python session. — rxp_r2py","text":"Transfer R object Python session.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r2py.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transfer R object into a Python session. — rxp_r2py","text":"","code":"rxp_r2py(name, expr, nix_env = \"default.nix\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r2py.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transfer R object into a Python session. — rxp_r2py","text":"name Symbol, name derivation. expr Symbol, R object saved Python pickle. nix_env Character, path Nix environment file, default \"default.nix\".","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r2py.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transfer R object into a Python session. — rxp_r2py","text":"object class rxp_derivation.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r2py.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transfer R object into a Python session. — rxp_r2py","text":"rxp_r2py(my_obj, my_r_object) saves R object Python pickle using reticulate::py_save_object().","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a Nix expression that reads in a file (or folder of data) using R. — rxp_r_file","title":"Creates a Nix expression that reads in a file (or folder of data) using R. — rxp_r_file","text":"Creates Nix expression reads file (folder data) using R.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a Nix expression that reads in a file (or folder of data) using R. — rxp_r_file","text":"","code":"rxp_r_file(...)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a Nix expression that reads in a file (or folder of data) using R. — rxp_r_file","text":"... Arguments passed rxp_file name Symbol, name derivation. path Character, file path include (e.g., \"data/mtcars.shp\") folder path (e.g., \"data\"). See details. read_function Function, R function read data, taking one argument (path). can user-defined function made available using user_functions. user_functions Character vector, user-defined functions include. script (scripts) containing user-defined functions include build process derivation. recommended use one script per function, include required script(s) derivation. nix_env Character, path Nix environment file, default \"default.nix\". env_var List, defaults NULL. named list environment variables set running R script, e.g., c(VAR = \"hello\"). entry added export statement build phase.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a Nix expression that reads in a file (or folder of data) using R. — rxp_r_file","text":"object class rxp_derivation.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_r_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a Nix expression that reads in a file (or folder of data) using R. — rxp_r_file","text":"basic usage provide path file, function read . example: rxp_r_file(mtcars, path = \"data/mtcars.csv\", read_function = read.csv). also possible instead point folder contains many files read , example: rxp_r_file(many_csvs, path = \"data\", read_function = \\(x)(readr::read_csv(list.files(x, full.names = TRUE, pattern = \".csv$\")))) Python example uses user-defined function: rxp_py_file(mtcars_py, path = 'data', \"read_many_csvs\", user_functions = \"functions.py\").","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read output of a derivation — rxp_read","title":"Read output of a derivation — rxp_read","text":"Reads output derivations current session, returns path reading directly possible.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read output of a derivation — rxp_read","text":"","code":"rxp_read(derivation_name, which_log = NULL, project_path = \".\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read output of a derivation — rxp_read","text":"derivation_name Character, name derivation. which_log Character, defaults NULL. NULL recent build log used. string provided, used regular expression match available log files. project_path Character, defaults \".\". Path root directory project.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read output of a derivation — rxp_read","text":"derivation's output.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read output of a derivation — rxp_read","text":"derivation_name points single R object, gets read current session using readRDS(). Python object {reticulate} available, reticulate::py_load_object() used. case derivation pointing several outputs (can happen building Quarto document example) neither readRDS() reticulate::py_load_object() successfully read object, path object returned instead.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read output of a derivation — rxp_read","text":"","code":"if (FALSE) { # \\dontrun{   mtcars <- rxp_read(\"mtcars\")    # Read from a specific build log   mtcars <- rxp_read(\"mtcars\", which_log = \"2025-05-10\") } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Render an R Markdown document as a Nix derivation — rxp_rmd","title":"Render an R Markdown document as a Nix derivation — rxp_rmd","text":"Render R Markdown document Nix derivation","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render an R Markdown document as a Nix derivation — rxp_rmd","text":"","code":"rxp_rmd(   name,   rmd_file,   additional_files = \"\",   nix_env = \"default.nix\",   params = NULL,   env_var = NULL,   noop_build = FALSE )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render an R Markdown document as a Nix derivation — rxp_rmd","text":"name Symbol, derivation name. rmd_file Character, path .Rmd file. additional_files Character vector, additional files include, example folder containing pictures include R Markdown document. nix_env Character, path Nix environment file, default \"default.nix\". params List, parameters pass R Markdown document. Default NULL. env_var List, defaults NULL. named list environment variables set running R Markdown render command, e.g., c(RSTUDIO_PANDOC = \"/path//pandoc\"). entry added export statement build phase. noop_build Logical, defaults FALSE. TRUE, derivation produces -op build (stub output actual build steps). downstream derivations depending -op build also become -op builds.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_rmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render an R Markdown document as a Nix derivation — rxp_rmd","text":"object class derivation inherits lists.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_rmd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Render an R Markdown document as a Nix derivation — rxp_rmd","text":"include objects built pipeline, rxp_read(\"derivation_name\") put .Rmd file.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_rmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render an R Markdown document as a Nix derivation — rxp_rmd","text":"","code":"if (FALSE) { # \\dontrun{   # Compile a .Rmd file to a pdf   # `images` is a folder containing images to include in the R Markdown doc   rxp_rmd(     name = report,     rmd_file = \"report.Rmd\",     additional_files = \"images\"   )    # Skip building this derivation   rxp_rmd(     name = draft_report,     rmd_file = \"draft.Rmd\",     noop_build = TRUE   ) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace lineage of derivations — rxp_trace","title":"Trace lineage of derivations — rxp_trace","text":"Trace lineage derivations","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace lineage of derivations — rxp_trace","text":"","code":"rxp_trace(   name = NULL,   dag_file = file.path(\"_rixpress\", \"dag.json\"),   transitive = TRUE,   include_self = FALSE )"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace lineage of derivations — rxp_trace","text":"name Charcter, defaults NULL. Name derivation inspect. NULL, function prints whole pipeline (inverted global view). dag_file Character, defaults \"_rixpress/dag.json\". Path dag.json. transitive Logical, defaults TRUE. TRUE, show transitive closure mark transitive-nodes \"*\". FALSE, show immediate neighbours . include_self Logical, defaults FALSE. TRUE, include name results.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_trace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace lineage of derivations — rxp_trace","text":"Invisibly, named list mapping inspected derivation name list elements: - dependencies - reverse_dependencies function also prints tree representation console.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_visnetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {visNetwork} — rxp_visnetwork","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {visNetwork} — rxp_visnetwork","text":"Uses {visNetwork} generate plot. {visNetwork} soft dependency {rixpress} need install use function.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_visnetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {visNetwork} — rxp_visnetwork","text":"","code":"rxp_visnetwork(nodes_and_edges = get_nodes_edges())"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_visnetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {visNetwork} — rxp_visnetwork","text":"nodes_and_edges List, output get_nodes_edges().","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_visnetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {visNetwork} — rxp_visnetwork","text":"Nothing, function opens new tab browser DAG generated using {visNetwork}.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_visnetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Directed Acyclic Graph (DAG) representing the pipeline using {visNetwork} — rxp_visnetwork","text":"","code":"if (FALSE) { # \\dontrun{   rxp_visnetwork() } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_write_dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a DAG from a list of derivations — rxp_write_dag","title":"Generate a DAG from a list of derivations — rxp_write_dag","text":"Creates JSON representation directed acyclic graph (DAG) based dependencies derivations. automatically called rxp_populate().","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_write_dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a DAG from a list of derivations — rxp_write_dag","text":"","code":"rxp_write_dag(rxp_list, output_file = \"_rixpress/dag.json\")"},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_write_dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a DAG from a list of derivations — rxp_write_dag","text":"rxp_list list derivations. output_file Path output JSON file. Defaults \"_rixpress/dag.json\".","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_write_dag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a DAG from a list of derivations — rxp_write_dag","text":"Nothing, writes JSON file representing DAG.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/rixpress/reference/rxp_write_dag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a DAG from a list of derivations — rxp_write_dag","text":"","code":"if (FALSE) { # \\dontrun{   rxp_write_dag(rxp_list) } # }"},{"path":"https://b-rodrigues.github.io/rixpress/reference/sanitize_nix_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Sanitize nix environment string — sanitize_nix_env","title":"Sanitize nix environment string — sanitize_nix_env","text":"Produces base identifier string replacing invalid characters stripping suffixes.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/sanitize_nix_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sanitize nix environment string — sanitize_nix_env","text":"","code":"sanitize_nix_env(nix_env)"},{"path":"https://b-rodrigues.github.io/rixpress/reference/sanitize_nix_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sanitize nix environment string — sanitize_nix_env","text":"nix_env Character path Nix environment file (e.g., \"default.nix\").","code":""},{"path":"https://b-rodrigues.github.io/rixpress/reference/sanitize_nix_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sanitize nix environment string — sanitize_nix_env","text":"Sanitized base string.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/news/index.html","id":"rixpress-020-2025-05-12","dir":"Changelog","previous_headings":"","what":"rixpress 0.2.0 (2025-05-12)","title":"rixpress 0.2.0 (2025-05-12)","text":"Submission RopenSci review. rxp_rmd(): build RMD documents. rxp_list_logs(): list logs builds, possible read artifacts previous builds rxp_read() (load rxp_load() well. DAG pipeline can visualised visNetwork ggdag.","code":""},{"path":"https://b-rodrigues.github.io/rixpress/news/index.html","id":"rixpress-010-2025-04-14","dir":"Changelog","previous_headings":"","what":"rixpress 0.1.0 (2025-04-14)","title":"rixpress 0.1.0 (2025-04-14)","text":"First release (GitHub).","code":""},{"path":"https://b-rodrigues.github.io/rixpress/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"rixpress 0.1.0 (2025-04-14)","text":"Possibility define pipelines R, Python Quarto outputs. Data transfer R Python made using reticulate. Basic plotting DAG pipeline. Demos available : https://github.com/b-rodrigues/rixpress_demos","code":""}]
