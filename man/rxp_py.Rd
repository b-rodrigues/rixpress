% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/derivs.R
\name{rxp_py}
\alias{rxp_py}
\title{rxp_py Creates a Nix expression running a Python function}
\usage{
rxp_py(name, py_expr, additional_files = "", nix_env = "default.nix")
}
\arguments{
\item{name}{Symbol, name of the derivation.}

\item{additional_files}{Character vector, additional files to include. Custom
functions must go into a script called "functions.R", and additional files
that need to be accessible during the build process can be named anything.}

\item{nix_env}{Character, path to the Nix environment file, default is "default.nix".}

\item{expr}{R code to generate the expression.}
}
\value{
A list with elements: \code{name}, the \code{name} of the derivation,
\code{snippet}, the Nix boilerplate code, \code{type}, \code{additional_files} and \code{nix_env}.
}
\description{
rxp_py Creates a Nix expression running a Python function
}
\details{
At a basic level,
\code{rxp_py(mtcars_am, "mtcars.filter(polars.col('am') == 1)")}
is equivalent to \verb{mtcars_am = mtcars.filter(polars.col('am') == 1). }rxp_py()\verb{generates the required Nix boilerplate to output a so-called "derivation" in Nix jargon. A Nix derivation is a recipe that defines how to create an output (in this case}mtcars_am`)
including its dependencies, build steps, and output paths.
}
\examples{
rxp_py(mtcars_pl_am, py_expr = "mtcars_pl.filter(polars.col('am') == 1).to_pandas()")
}
