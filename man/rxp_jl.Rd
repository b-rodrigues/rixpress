% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/derivs.R
\name{rxp_jl}
\alias{rxp_jl}
\title{Create a Nix expression running a Julia function}
\usage{
rxp_jl(
  name,
  jl_expr,
  additional_files = "",
  nix_env = "default.nix",
  serialize_function = NULL,
  unserialize_function = NULL,
  env_var = NULL
)
}
\arguments{
\item{name}{Symbol, name of the derivation.}

\item{jl_expr}{Character, Julia code to generate the expression.}

\item{additional_files}{Character vector, additional files to include. Custom
functions must go into a script called "functions.jl", and additional files
that need to be accessible during the build process can be named anything.}

\item{nix_env}{Character, path to the Nix environment file, default is
"default.nix".}

\item{serialize_function}{Character, defaults to NULL. The name of the Julia
function used to serialize the object. It must accept two arguments: the
object to serialize (first), and the target file path (second). If NULL,
the default behavior uses the built‐in \code{Serialization.serialize} API. Define
any custom serializer in \code{functions.jl}.}

\item{unserialize_function}{Character, defaults to NULL. The name of the Julia
function used to unserialize the object. It must accept one argument: the
file path. If NULL, the default is assumed to be \code{Serialization.deserialize}.}

\item{env_var}{Character vector, defaults to NULL. A named vector of
environment variables to set before running the Julia script, e.g.,
\code{c("JULIA_DEPOT_PATH" = "/path/to/depot")}. Each entry will be added as
an \code{export} statement in the build phase.}
}
\value{
An object of class derivation which inherits from lists.
}
\description{
Create a Nix expression running a Julia function
}
\details{
At a basic level,
\code{rxp_jl(filtered_data, "filter(df, :col .> 10)")} is equivalent to
\verb{filtered_data = filter(df, :col .> 10)} in Julia. \code{rxp_jl()} generates the
required Nix boilerplate to output a so‐called "derivation" in Nix jargon.
A Nix derivation is a recipe that defines how to create an output (in this
case \code{filtered_data}) including its dependencies, build steps, and output
paths.
}
\examples{
\dontrun{
# Basic usage, no custom serializer
rxp_jl(
  name = filtered_df,
  jl_expr = "filter(df, :col .> 10)"
)

# Custom serialization: assume `save_my_obj(obj, path)` is defined in functions.jl
rxp_jl(
  name = model_output,
  jl_expr = "train_model(data)",
  serialize_function = "save_my_obj",
  additional_files = "functions.jl"
)
}
}
\seealso{
Other derivations: 
\code{\link{rxp_py}()},
\code{\link{rxp_py_file}()},
\code{\link{rxp_qmd}()},
\code{\link{rxp_r}()},
\code{\link{rxp_r_file}()},
\code{\link{rxp_rmd}()}

Other derivations: 
\code{\link{rxp_py}()},
\code{\link{rxp_py_file}()},
\code{\link{rxp_qmd}()},
\code{\link{rxp_r}()},
\code{\link{rxp_r_file}()},
\code{\link{rxp_rmd}()}
}
\concept{derivations}
