% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rxp_populate.R
\name{rxp_populate}
\alias{rxp_populate}
\title{Populate the pipeline (generate files) without building}
\usage{
rxp_populate(derivs, project_path = ".", py_imports = NULL, ...)
}
\arguments{
\item{derivs}{A list of derivation objects created by rxp_*() helpers.}

\item{project_path}{Path to the project root. Defaults to ".".}

\item{py_imports}{Named character vector of Python import rewrites. Names are
the base modules that rixpress auto-imports as "import \if{html}{\out{<name>}}", and values
are the desired import lines. For example: c(numpy = "import numpy as np",
pillow = "from PIL import Image"). Each entry is applied by replacing
"import \if{html}{\out{<name>}}" with the provided string across generated _rixpress Python
library files.}

\item{...}{Ignored when build = FALSE; kept for signature parity with
rixpress().}
}
\value{
Invisibly returns NULL. Side effects: writes generated files.
}
\description{
rxp_populate() generates the pipeline assets (e.g., _rixpress/, pipeline.nix,
dag.json) but does not build. It is equivalent to calling rixpress(build =
FALSE). Additionally, you can inline Python import adjustments via
\code{py_imports}.
}
\examples{
\dontrun{
list(
  rxp_py(
    name = "mdl",
    py_expr = "XGBClassifier()"
  )
) |>
  rxp_populate(
    py_imports = c(
      numpy   = "import numpy as np",
      xgboost = "from xgboost import XGBClassifier"
    )
  )

rxp_make()
}
}
\seealso{
Other pipeline functions: 
\code{\link{rixpress}()},
\code{\link{rxp_make}()}
}
\concept{pipeline functions}
