% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/derivs.R
\name{rxp_py_file}
\alias{rxp_py_file}
\title{rxp_py_file}
\usage{
rxp_py_file(
  name,
  path,
  read_function,
  nix_env = "default.nix",
  copy_data_folder = FALSE
)
}
\arguments{
\item{name}{Symbol, the name of the derivation.}

\item{path}{Character, the file path to include (e.g., "data/mtcars.shp") or a folder path (e.g., "data"). See details.}

\item{read_function}{Character, a Python function to read the data, taking one argument (the path).}

\item{nix_env}{Character, path to the Nix environment file, default is "default.nix".}

\item{copy_data_folder}{Logical, if TRUE then the entire folder is copied recursively.}
}
\value{
A list with \code{name}, \code{snippet}, \code{type}, and \code{nix_env}.
}
\description{
Creates a Nix expression that reads in a file (or folder of data) using Python.
}
\details{
There are three ways to read in data in a rixpress pipeline: the first is to point directly
a file, for example, \code{rxp_r_file(mtcars, path = "data/mtcars.csv", read_function = read.csv)}.
The second way is to point to a file but to also include of the files in the "data/" folder
(the folder can called something else). This is needed when data is split between several
files, such as a shapfile which typically also needs other files such as \code{.shx} and \code{.dbf} files.
For this, \code{copy_data_folder} must be set to \code{TRUE}. The last way to read in data, is to only
point to a folder, and use a function that recursively reads in all data. For example
\code{rxp_py_file(many_csvs, path = "data", read_function = 'lambda x: pandas.read_csv(os.path.join(x, os.listdir(x)[0]), delimiter="|")')}
the provided anonymous function will read all the \code{.csv} file in the \verb{data/} folder.
}
